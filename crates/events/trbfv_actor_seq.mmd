sequenceDiagram
  participant E as EVM
  participant L as LibP2p
  participant CS as CiphernodeSelector
  participant S as Sortition
  participant P as PlaintextAggregator
  participant K as Keyshare
  participant M as Multithread(1)
  participant M2 as Multithread(2)


  E --) CS: E3Requested
  CS ->>+ S: am I selected?
  S -->>- CS: yes
  CS --)+ K: CiphernodeSelected (via E3Router)

  rect rgb(230, 245, 255)
    Note over K,M2: Distributed Key Generation 
    K ->> K: pvw::gen_party()
    K ->>- L: EncryptionPubkeyCreated
    L --)+ K: EncryptionPubkeyCreated
    L --) K: EncryptionPubkeyCreated
    K ->> K: pvw::gen_public_key()
    K ->>- L: GlobalEncryptionKeyAggregated
    K ->>+ M: ComputeRequest(TrBFV::GenEsiSss)
    K ->>+ M2: ComputeRequest(TrBFV::GenPkShareAndSkSss)
    M ->> M: trbfv::gen_esi_sss()
    M2 ->> M2: trbfv::gen_pk_share_and_sk_sss()
    M --)- K: ComputeRessponse(TrBFV::GenEsiSss)
    M2 --)- K: ComputeRessponse(TrBFV::GenPkShareAndSkSss)
    K ->> L: KeyshareCreated
    K ->>+ K: pvw::encrypt(sk_sss, esi_sss)
    K ->>- L: PublishDocument (shares)
    L --)+ K: DocumentReceived (shares)
    K ->>- K: extract_collected_sss()
    K ->>+ M: ComputeRequest(TrBFV::GenDecryptionKey)
    M ->> M: trbfv::gen_decryption_key()
    M --)- K: ComputeResponse(TrBFV::GenDecryptionKey)
  end

  rect rgb(230, 245, 255)
    Note over K,M: Generate Decryption Share
    E --) K: CiphertextOutputPublished
    K ->>+ M: ComputeRequest(TrBFV::GenDecryptionShare)
    M ->> M: trbfv::gen_decryption_share()
    M --)- K: ComputeResponse(TrBFV::GenDecryptionShare)
    K ->> L: DecryptionShareCreated
  end

  rect rgb(230, 245, 255)
    Note over P,M: Plaintext Aggregation
    L --) P: DecryptionShareCreated
    L --) P: DecryptionShareCreated
    L --) P: DecryptionShareCreated
    P ->> M: ComputeRequest(TrBFV::ThresholdDecrypt)
    M ->> M: trbfv::threshold_decrypt()
    M ->> P: ComputeResponse(TrBFV::ThresholdDecrypt)
    P ->> E: PlaintextAggregated
  end

  autonumber


