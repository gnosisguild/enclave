sequenceDiagram
  participant E as EVM
  participant L as LibP2p
  participant CS as CiphernodeSelector
  participant S as Sortition
  participant P as PlaintextAggregator
  participant K as ThresholdKeyshare
  participant K2 as PvwKeyAggregator
  participant K3 as DecryptionKeyCollector
  participant M as Multithread(1)
  participant M2 as Multithread(2)

  E --) CS: E3Requested
  CS ->> S: am I selected?
  S -->> CS: yes
  CS --) K: create with CiphernodeSelected (via E3Router)
  K ->> K2: create with knowledge of m & n 
  K ->> K3: create with knowledge of m & n 
  rect rgb(230, 245, 255)
    K ->> K: StartPvwKeyGeneration
    Note over K, M2: PVW Key Generation
    K ->> K: pvw::gen_party()
    K ->> L: EncryptionPubkeyCreated
    K ->> K2: EncryptionPubkeyCreated
    L --) K2: EncryptionPubkeyCreated
    L --) K2: EncryptionPubkeyCreated
    K2 ->> K2: pvw::gen_public_key()
    K2 ->> K: GlobalEncryptionKeyAggregated
    K ->> L: GlobalEncryptionKeyAggregated
  end
  rect rgb(230, 245, 255)
    K ->> K: StartThresholdShareGeneration
    Note over K, M2: Threshold Share Generation
    K ->> M: ComputeRequest(TrBFV::GenEsiSss)
    K ->> M2: ComputeRequest(TrBFV::GenPkShareAndSkSss)
    M ->> M: trbfv::gen_esi_sss()
    M2 ->> M2: trbfv::gen_pk_share_and_sk_sss()
    M --) K: ComputeRessponse(TrBFV::GenEsiSss)
    M2 --) K: ComputeRessponse(TrBFV::GenPkShareAndSkSss)
    K ->> K: pvw::encrypt_to_global_pubkey(sk_sss, esi_sss)
    K ->> L: ThresholdSharesCreated (shares)
  end
  rect rgb(230, 245, 255)
    Note over K, M: Aggregating Decryption Key
    L --) K3: ThresholdSharesCreated (shares)
    L --) K3: ThresholdSharesCreated (shares)
    K3 ->> K: AllThresholdSharesCollected
    K ->> K: extract_collected_sss(pvw::decrypt())
    K ->> M: ComputeRequest(TrBFV::GenDecryptionKey)
    M ->> M: trbfv::calculate_decryption_key()
    M --) K: ComputeResponse(TrBFV::GenDecryptionKey)
    Note over K: Whilst we have had the <br/>PublicKeyshare for some time<br/> we only now send KeyshareCreated<br/> to indicate that we are ready to decrypt
    K ->> L: KeyshareCreated(pubkeyshare)
  end
  rect rgb(230, 245, 255)
    Note over K, M: Generate Decryption Share
    E --) K: CiphertextOutputPublished
    K ->> M: ComputeRequest(TrBFV::GenDecryptionShare)
    M ->> M: trbfv::calculate_decryption_share()
    M --) K: ComputeResponse(TrBFV::GenDecryptionShare)
    K ->> L: DecryptionShareCreated
  end
  rect rgb(230, 245, 255)
    Note over P, M: Plaintext Aggregation
    L --) P: DecryptionShareCreated
    L --) P: DecryptionShareCreated
    L --) P: DecryptionShareCreated
    P ->> M: ComputeRequest(TrBFV::ThresholdDecrypt)
    M ->> M: trbfv::calculate_threshold_decryption()
    M ->> P: ComputeResponse(TrBFV::ThresholdDecrypt)
    P ->> E: PlaintextAggregated
  end
  autonumber



