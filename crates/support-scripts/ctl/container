#!/usr/bin/env bash

GIT_SHA=$(enclave rev)
CONTAINER_NAME="e3-support.1"
IMAGE="ghcr.io/gnosisguild/e3-support:$GIT_SHA"
CACHE_PREFIX="e3-support"

# Check if the image exists locally or remotely if not bail
# Every time we push we build support so every build of enclave should have support built too.
# This solves the problem where a person will be using the cli with a specific `enclave rev` but our latest 
# support scripts have changed which will break the support behaviour for the user.
# The user can then upgrade their cli once they are ready and then the support image will match their version
if ! docker image inspect "$IMAGE" >/dev/null 2>&1 && ! docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
    echo "Support scripts not found for git sha \"$GIT_SHA\" Please recompile the support scripts for this version of the enclave cli within the source repository"
    exit 1
fi

# Function to cleanup
cleanup() {
    echo "Stopping container and processes..."
    # Try to gracefully stop the container first
    docker exec "$CONTAINER_NAME" pkill -SIGTERM e3-support-app 2>/dev/null || true
    sleep 2
    # Force stop if still running
    docker exec "$CONTAINER_NAME" pkill -SIGKILL e3-support-app 2>/dev/null || true
    docker stop "$CONTAINER_NAME" 2>/dev/null || true
}

# Set trap for signals
trap cleanup EXIT INT TERM

# Ensure directories exist with proper permissions
mkdir -p "$(pwd)/.enclave/target"
chmod -R 777 "$(pwd)/.enclave/target"

if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
    echo "Running exec $IMAGE..."
    docker exec -it "$CONTAINER_NAME" bash -c "$*"
else
    echo "Running start $IMAGE..."
    docker run -it --rm \
        --name "$CONTAINER_NAME" \
        --platform linux/amd64 \
        --network=host \
        -v "$(pwd)/contracts:/app/contracts" \
        -v "$(pwd)/tests:/app/tests" \
        -v "$(pwd)/.enclave/target:/app/target" \
        -v "${CACHE_PREFIX}-cargo-cache:/usr/local/cargo" \
        "$IMAGE" bash -c "$*"
fi
