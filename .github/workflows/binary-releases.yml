name: Binary Releases

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

permissions:
  contents: write

jobs:
  build:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            os_name: linux
            arch: x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            os_name: linux
            arch: aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            os_name: macos
            arch: x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            os_name: macos
            arch: aarch64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
          
      - name: Configure cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Build enclave
        run: cargo build --release --target ${{ matrix.target }} --bin enclave

      - name: Build enclaveup
        run: cargo build --release --target ${{ matrix.target }} --bin enclaveup

      - name: Create release archives
        run: |
          mkdir -p dist
          
          # Get the correct binary extension
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            EXT=".exe"
          else
            EXT=""
          fi
          
          # Create enclave archive
          cp "target/${{ matrix.target }}/release/enclave${EXT}" "./enclave${EXT}"
          tar -czf "dist/enclave-${{ matrix.os_name }}-${{ matrix.arch }}.tar.gz" "enclave${EXT}"
          rm "enclave${EXT}"
          
          # Create enclaveup archive
          cp "target/${{ matrix.target }}/release/enclaveup${EXT}" "./enclaveup${EXT}"
          tar -czf "dist/enclaveup-${{ matrix.os_name }}-${{ matrix.arch }}.tar.gz" "enclaveup${EXT}"
          rm "enclaveup${EXT}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os_name }}-${{ matrix.arch }}
          path: dist/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Flatten artifacts
        run: |
          mkdir -p release-assets
          find dist/ -name "*.tar.gz" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Release ${{ steps.get_tag.outputs.tag }}
          draft: false
          prerelease: false
          files: release-assets/*
          body: |
            ## Installation

            ### Install enclaveup (the installer)
            ```bash
            curl -fsSL https://raw.githubusercontent.com/gnosisguild/enclave/main/install | bash
            ```

            ### Use enclaveup to install enclave
            ```bash
            enclaveup install
            ```

            ## Assets
            - `enclave-*`: The main Enclave CLI binary
            - `enclaveup-*`: The installer binary

            Supported platforms:
            - Linux (x86_64, aarch64)
            - macOS (x86_64, aarch64) 