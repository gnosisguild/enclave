name: TEMPLATE
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - hacknet
  push:
    branches:
      - main
      - hacknet
env:
  DOCKERFILE_PATH: crates/support/Dockerfile
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/e3-support
permissions:
  contents: read
  packages: write
jobs:
  build:
    name: Compile and push Support Dockerfile
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate version tag
        id: version
        run: |
          echo "version=$(git rev-parse --short=9 HEAD)" >> $GITHUB_OUTPUT
      - name: Generate tags
        id: tags
        run: |
          VERSION=$(git rev-parse --short=9 HEAD)
          TAGS="${{ env.IMAGE_NAME }}:$VERSION"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            TAGS="$TAGS,${{ env.IMAGE_NAME }}:latest"
          elif [ "${{ github.ref }}" = "refs/heads/hacknet" ]; then
            TAGS="$TAGS,${{ env.IMAGE_NAME }}:hacknet"
          fi
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
      - name: Set up BuildKit
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: ./crates/support
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: |
            type=gha,scope=cargo-registry
            type=gha,scope=cargo-git
            type=gha,scope=cargo-target
            type=gha,scope=buildcache
          cache-to: |
            type=gha,mode=max,scope=cargo-registry
            type=gha,mode=max,scope=cargo-git
            type=gha,mode=max,scope=cargo-target
            type=gha,mode=max,scope=buildcache

  build_binary:
    name: Build Enclave Binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.85.0
      - name: Install enclave CLI
        run: cargo install --path crates/cli --bin enclave
      - name: Cache binary
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/enclave
          key: enclave-binary-${{ github.sha }}

  build_sdk:
    name: Build SDK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.85.0
          targets: wasm32-unknown-unknown
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: Install node dependencies
        run: pnpm install
      - name: Build the sdk
        run: pnpm evm:build
      - name: Cache SDK build
        uses: actions/cache@v4
        with:
          path: |
            packages/evm/dist
            crates/wasm/dist
            node_modules
          key: sdk-build-${{ github.sha }}

  build_program_server:
    name: Build Dev Mode Program Server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.85.0
      - name: Build support scripts
        run: cd templates/default && cargo build --bin e3-support-scripts-dev

  template_integration:
    name: Template Integration
    runs-on: ubuntu-latest
    needs: [build_binary, build_sdk, build_program_server]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.85.0
      - name: Restore binary cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/enclave
          key: enclave-binary-${{ github.sha }}
      - name: Restore SDK build cache
        uses: actions/cache@v4
        with:
          path: |
            packages/evm/dist
            crates/wasm/dist
            node_modules
          key: sdk-build-${{ github.sha }}
      - name: Test Template
        run: cd templates/default && chmod 777 contracts && chmod 777 tests && chmod 777 contracts/ImageID.sol && pnpm test:integration
