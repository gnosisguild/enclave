import{B as p,g as b,s as h,d as O,i as x,c as L,a as $,e as M,H as m,b as R}from"./index-DDskuOFx.js";class S extends p{constructor({callbackSelector:r,cause:e,data:n,extraData:c,sender:l,urls:a}){var u;super(e.shortMessage||"An error occurred while fetching for an offchain result.",{cause:e,metaMessages:[...e.metaMessages||[],(u=e.metaMessages)!=null&&u.length?"":[],"Offchain Gateway Call:",a&&["  Gateway URL(s):",...a.map(d=>`    ${b(d)}`)],`  Sender: ${l}`,`  Data: ${n}`,`  Callback selector: ${r}`,`  Extra data: ${c}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}class v extends p{constructor({result:r,url:e}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${b(e)}`,`Response: ${h(r)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}class E extends p{constructor({sender:r,to:e}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${e}`,`OffchainLookup sender address: ${r}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}const T="0x556f1830",y={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function j(o,{blockNumber:r,blockTag:e,data:n,to:c}){const{args:l}=O({data:n,abi:[y]}),[a,u,d,t,s]=l,{ccipRead:i}=o,w=i&&typeof(i==null?void 0:i.request)=="function"?i.request:g;try{if(!x(c,a))throw new E({sender:a,to:c});const f=await w({data:d,sender:a,urls:u}),{data:k}=await L(o,{blockNumber:r,blockTag:e,data:$([t,M([{type:"bytes"},{type:"bytes"}],[f,s])]),to:c});return k}catch(f){throw new S({callbackSelector:t,cause:f,data:n,extraData:s,sender:a,urls:u})}}async function g({data:o,sender:r,urls:e}){var c;let n=new Error("An unknown error occurred.");for(let l=0;l<e.length;l++){const a=e[l],u=a.includes("{data}")?"GET":"POST",d=u==="POST"?{data:o,sender:r}:void 0;try{const t=await fetch(a.replace("{sender}",r).replace("{data}",o),{body:JSON.stringify(d),method:u});let s;if((c=t.headers.get("Content-Type"))!=null&&c.startsWith("application/json")?s=(await t.json()).data:s=await t.text(),!t.ok){n=new m({body:d,details:s!=null&&s.error?h(s.error):t.statusText,headers:t.headers,status:t.status,url:a});continue}if(!R(s)){n=new v({result:s,url:a});continue}return s}catch(t){n=new m({body:d,details:t.message,url:a})}}throw n}export{g as ccipRequest,j as offchainLookup,y as offchainLookupAbiItem,T as offchainLookupSignature};
