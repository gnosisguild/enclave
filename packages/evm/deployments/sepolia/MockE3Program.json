{
  "address": "0xc7fe6Ee2e3e3Da8E1448B3531f92c676B06257b5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IInputValidator",
          "name": "_inputValidator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "E3AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInputValidator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "e3ProgramParams",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "computeProviderParams",
          "type": "bytes"
        }
      ],
      "name": "invalidParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ENCRYPTION_SCHEME_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inputValidator",
      "outputs": [
        {
          "internalType": "contract IInputValidator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "paramsHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "paramsHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "e3ProgramParams",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "computeProviderParams",
          "type": "bytes"
        }
      ],
      "name": "validate",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "contract IInputValidator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x3876bae2247b8651c1c466eab1db3a97142acfe6206f3b7e5e5b9433b9211f91",
  "receipt": {
    "to": null,
    "from": "0x8837e47c4Bb520ADE83AAB761C3B60679443af1B",
    "contractAddress": "0xc7fe6Ee2e3e3Da8E1448B3531f92c676B06257b5",
    "transactionIndex": 128,
    "gasUsed": "266938",
    "logsBloom": "0x
    "blockHash": "0xc34a49bf1984733b779b846db46955d9c8232e6fad570601530fd81b5da4aea7",
    "transactionHash": "0x3876bae2247b8651c1c466eab1db3a97142acfe6206f3b7e5e5b9433b9211f91",
    "logs": [],
    "blockNumber": 8332813,
    "cumulativeGasUsed": "12236361",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe2be22b924CAF680500497f5Ba77A927EbdeD1Ae"
  ],
  "numDeployments": 2,
  "solcInputHash": "f32a0aa4ee06fa210859a817cc9dafc5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IInputValidator\",\"name\":\"_inputValidator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"E3AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInputValidator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"e3ProgramParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"computeProviderParams\",\"type\":\"bytes\"}],\"name\":\"invalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ENCRYPTION_SCHEME_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputValidator\",\"outputs\":[{\"internalType\":\"contract IInputValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"paramsHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"paramsHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"e3ProgramParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"computeProviderParams\",\"type\":\"bytes\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"contract IInputValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockE3Program.sol\":\"MockE3Program\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IE3Program.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.27;\\n\\nimport { IInputValidator } from \\\"./IInputValidator.sol\\\";\\n\\ninterface IE3Program {\\n    /// @notice This function should be called by the Enclave contract to validate the computation parameters.\\n    /// @param e3Id ID of the E3.\\n    /// @param seed Seed for the computation.\\n    /// @param e3ProgramParams ABI encoded computation parameters.\\n    /// @param computeProviderParams ABI encoded compute provider parameters.\\n    /// @return encryptionSchemeId ID of the encryption scheme to be used for the computation.\\n    /// @return inputValidator The input validator to be used for the computation.\\n    function validate(\\n        uint256 e3Id,\\n        uint256 seed,\\n        bytes calldata e3ProgramParams,\\n        bytes calldata computeProviderParams\\n    )\\n        external\\n        returns (bytes32 encryptionSchemeId, IInputValidator inputValidator);\\n\\n    /// @notice This function should be called by the Enclave contract to verify the decrypted output of an E3.\\n    /// @param e3Id ID of the E3.\\n    /// @param ciphertextOutputHash The keccak256 hash of output data to be verified.\\n    /// @param proof ABI encoded data to verify the ciphertextOutputHash.\\n    /// @return success Whether the output data is valid.\\n    function verify(\\n        uint256 e3Id,\\n        bytes32 ciphertextOutputHash,\\n        bytes memory proof\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xd60e92b5b6498daf0b7f1238d354156c67d25c03caaaabbc601368e9e4a295b2\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IInputValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.27;\\n\\ninterface IInputValidator {\\n    /// @notice This function should be called by the Enclave contract to validate the\\n    /// input of a computation.\\n    /// @param sender The account that is submitting the input.\\n    /// @param data The input to be verified.\\n    /// @return input The decoded, policy-approved application payload.\\n    function validate(\\n        address sender,\\n        bytes memory data\\n    ) external returns (bytes memory input);\\n}\\n\",\"keccak256\":\"0x20d4016bd59c317c5571cfe6c3e8f46cbabddc0b926dc64019eeae8d29788653\",\"license\":\"LGPL-3.0-only\"},\"contracts/test/MockE3Program.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.27;\\n\\nimport { IE3Program, IInputValidator } from \\\"../interfaces/IE3Program.sol\\\";\\n\\ncontract MockE3Program is IE3Program {\\n    error invalidParams(bytes e3ProgramParams, bytes computeProviderParams);\\n    error InvalidInputValidator();\\n    error E3AlreadyInitialized();\\n    bytes32 public constant ENCRYPTION_SCHEME_ID = keccak256(\\\"fhe.rs:BFV\\\");\\n\\n    IInputValidator public inputValidator;\\n    mapping(uint256 e3Id => bytes32 paramsHash) public paramsHashes;\\n\\n    constructor(IInputValidator _inputValidator) {\\n        if (address(_inputValidator) == address(0)) {\\n            revert InvalidInputValidator();\\n        }\\n\\n        inputValidator = _inputValidator;\\n    }\\n\\n    function validate(\\n        uint256 e3Id,\\n        uint256,\\n        bytes calldata e3ProgramParams,\\n        bytes calldata computeProviderParams\\n    ) external returns (bytes32, IInputValidator) {\\n        require(\\n            computeProviderParams.length == 32,\\n            invalidParams(e3ProgramParams, computeProviderParams)\\n        );\\n\\n        require(paramsHashes[e3Id] == bytes32(0), E3AlreadyInitialized());\\n        paramsHashes[e3Id] = keccak256(e3ProgramParams);\\n\\n        paramsHashes[e3Id] = keccak256(e3ProgramParams);\\n        return (ENCRYPTION_SCHEME_ID, inputValidator);\\n    }\\n\\n    function verify(\\n        uint256,\\n        bytes32,\\n        bytes memory data\\n    ) external pure returns (bool success) {\\n        data;\\n        if (data.length > 0) success = true;\\n    }\\n}\\n\",\"keccak256\":\"0x0234622000a090d14b9f5c1690e6b24af5f14f7537b75fe40a71ae277d47faec\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608034608657601f61040c38819003918201601f19168301916001600160401b03831184841017608b57808492602094604052833981010312608657516001600160a01b038116908190036086578015607557600080546001600160a01b03191691909117905560405161036a90816100a28239f35b6310160a0760e11b60005260046000fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c908163143c083614610277575080632f0e1bbf1461021757806378d89187146101dc578063a3926079146101a85763a61d7e3e1461005657600080fd5b346101a35760803660031901126101a35760043560443567ffffffffffffffff81116101a35761008a90369060040161030e565b9060643567ffffffffffffffff81116101a3576100ab90369060040161030e565b60208103610163575050826000526001602052604060002054610152576100f4916100d736828461029f565b60208151910120846000526001602052604060002055369161029f565b60208151910120906000526001602052604060002055604073ffffffffffffffffffffffffffffffffffffffff600054168151907f2c2a814a0495f913a3a312fc4771e37552bc14f8a2d4075a08122d356f0849c682526020820152f35b6335751e3760e11b60005260046000fd5b61019f92945061018d6040519586956312bed5ff60e31b875260406004880152604487019161033c565b8481036003190160248601529161033c565b0390fd5b600080fd5b346101a35760003660031901126101a357602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b346101a35760003660031901126101a35760206040517f2c2a814a0495f913a3a312fc4771e37552bc14f8a2d4075a08122d356f0849c68152f35b346101a35760603660031901126101a35760443567ffffffffffffffff81116101a357366023820112156101a35761025990369060248160040135910161029f565b6000905161026f575b6020906040519015158152f35b506001610262565b346101a35760203660031901126101a357602090600435600052600182526040600020548152f35b92919267ffffffffffffffff82116102f85760405191601f8101601f19908116603f0116830167ffffffffffffffff8111848210176102f8576040528294818452818301116101a3578281602093846000960137010152565b634e487b7160e01b600052604160045260246000fd5b9181601f840112156101a35782359167ffffffffffffffff83116101a357602083818601950101116101a357565b908060209392818452848401376000828201840152601f01601f191601019056fea164736f6c634300081b000a",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c908163143c083614610277575080632f0e1bbf1461021757806378d89187146101dc578063a3926079146101a85763a61d7e3e1461005657600080fd5b346101a35760803660031901126101a35760043560443567ffffffffffffffff81116101a35761008a90369060040161030e565b9060643567ffffffffffffffff81116101a3576100ab90369060040161030e565b60208103610163575050826000526001602052604060002054610152576100f4916100d736828461029f565b60208151910120846000526001602052604060002055369161029f565b60208151910120906000526001602052604060002055604073ffffffffffffffffffffffffffffffffffffffff600054168151907f2c2a814a0495f913a3a312fc4771e37552bc14f8a2d4075a08122d356f0849c682526020820152f35b6335751e3760e11b60005260046000fd5b61019f92945061018d6040519586956312bed5ff60e31b875260406004880152604487019161033c565b8481036003190160248601529161033c565b0390fd5b600080fd5b346101a35760003660031901126101a357602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b346101a35760003660031901126101a35760206040517f2c2a814a0495f913a3a312fc4771e37552bc14f8a2d4075a08122d356f0849c68152f35b346101a35760603660031901126101a35760443567ffffffffffffffff81116101a357366023820112156101a35761025990369060248160040135910161029f565b6000905161026f575b6020906040519015158152f35b506001610262565b346101a35760203660031901126101a357602090600435600052600182526040600020548152f35b92919267ffffffffffffffff82116102f85760405191601f8101601f19908116603f0116830167ffffffffffffffff8111848210176102f8576040528294818452818301116101a3578281602093846000960137010152565b634e487b7160e01b600052604160045260246000fd5b9181601f840112156101a35782359167ffffffffffffffff83116101a357602083818601950101116101a357565b908060209392818452848401376000828201840152601f01601f191601019056fea164736f6c634300081b000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 71,
        "contract": "contracts/test/MockE3Program.sol:MockE3Program",
        "label": "inputValidator",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IInputValidator)46"
      },
      {
        "astId": 75,
        "contract": "contracts/test/MockE3Program.sol:MockE3Program",
        "label": "paramsHashes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IInputValidator)46": {
        "encoding": "inplace",
        "label": "contract IInputValidator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}