{
  "address": "0x4c19b2b2cE63129B494Cb0b0eCa4a2f761C649D6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_enclave",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CommitteeAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitteeAlreadyPublished",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitteeDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitteeNotPublished",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRegistry",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3",
          "type": "uint256"
        }
      ],
      "name": "committees",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "nodes",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "publishCommittee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "internalType": "uint32[2]",
          "name": "threshold",
          "type": "uint32[2]"
        }
      ],
      "name": "requestCommittee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e1cd2b9beba7d5ca0540a7dc817b897998eed25f69128ab8c18e72213a607bb",
  "receipt": {
    "to": null,
    "from": "0x485E60C486671E932fd9C53d4110cdEab1E7F0eb",
    "contractAddress": "0x4c19b2b2cE63129B494Cb0b0eCa4a2f761C649D6",
    "transactionIndex": 103,
    "gasUsed": "765625",
    "logsBloom": "0x
    "blockHash": "0x5f2631ec7ee97ddbc4d178d3d10e876979fcefde8efcb1e7be33f21c66013da9",
    "transactionHash": "0x3e1cd2b9beba7d5ca0540a7dc817b897998eed25f69128ab8c18e72213a607bb",
    "logs": [
      {
        "transactionIndex": 103,
        "blockNumber": 6668292,
        "transactionHash": "0x3e1cd2b9beba7d5ca0540a7dc817b897998eed25f69128ab8c18e72213a607bb",
        "address": "0x4c19b2b2cE63129B494Cb0b0eCa4a2f761C649D6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000485e60c486671e932fd9c53d4110cdeab1e7f0eb"
        ],
        "data": "0x",
        "logIndex": 154,
        "blockHash": "0x5f2631ec7ee97ddbc4d178d3d10e876979fcefde8efcb1e7be33f21c66013da9"
      },
      {
        "transactionIndex": 103,
        "blockNumber": 6668292,
        "transactionHash": "0x3e1cd2b9beba7d5ca0540a7dc817b897998eed25f69128ab8c18e72213a607bb",
        "address": "0x4c19b2b2cE63129B494Cb0b0eCa4a2f761C649D6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000485e60c486671e932fd9c53d4110cdeab1e7f0eb",
          "0x000000000000000000000000485e60c486671e932fd9c53d4110cdeab1e7f0eb"
        ],
        "data": "0x",
        "logIndex": 155,
        "blockHash": "0x5f2631ec7ee97ddbc4d178d3d10e876979fcefde8efcb1e7be33f21c66013da9"
      },
      {
        "transactionIndex": 103,
        "blockNumber": 6668292,
        "transactionHash": "0x3e1cd2b9beba7d5ca0540a7dc817b897998eed25f69128ab8c18e72213a607bb",
        "address": "0x4c19b2b2cE63129B494Cb0b0eCa4a2f761C649D6",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 156,
        "blockHash": "0x5f2631ec7ee97ddbc4d178d3d10e876979fcefde8efcb1e7be33f21c66013da9"
      }
    ],
    "blockNumber": 6668292,
    "cumulativeGasUsed": "14723279",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x485E60C486671E932fd9C53d4110cdEab1E7F0eb",
    "0xF9E3aeB059D699Ac4541625DE81062d6D8ad7e85"
  ],
  "numDeployments": 1,
  "solcInputHash": "d0e6e4f19028714f394c36db62dff2be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_enclave\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CommitteeAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitteeAlreadyPublished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitteeDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitteeNotPublished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRegistry\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3\",\"type\":\"uint256\"}],\"name\":\"committees\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"nodes\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"publishCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"internalType\":\"uint32[2]\",\"name\":\"threshold\",\"type\":\"uint32[2]\"}],\"name\":\"requestCommittee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/NaiveRegistryFilter.sol\":\"NaiveRegistryFilter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"contracts/interfaces/ICyphernodeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.26;\\n\\ninterface ICyphernodeRegistry {\\n    /// @notice This event MUST be emitted when a committee is selected for an E3.\\n    /// @param e3Id ID of the E3 for which the committee was selected.\\n    /// @param filter Address of the contract that will coordinate committee selection.\\n    /// @param threshold The M/N threshold for the committee.\\n    event CommitteeRequested(\\n        uint256 indexed e3Id,\\n        address filter,\\n        uint32[2] threshold\\n    );\\n\\n    /// @notice This event MUST be emitted when a committee is selected for an E3.\\n    /// @param e3Id ID of the E3 for which the committee was selected.\\n    /// @param publicKey Public key of the committee.\\n    event CommitteePublished(uint256 indexed e3Id, bytes publicKey);\\n\\n    /// @notice This event MUST be emitted when `enclave` is set.\\n    /// @param enclave Address of the enclave contract.\\n    event EnclaveSet(address indexed enclave);\\n\\n    /// @notice This event MUST be emitted when a cyphernode is added to the registry.\\n    event CyphernodeAdded(address indexed node);\\n\\n    /// @notice This event MUST be emitted when a cyphernode is removed from the registry.\\n    event CyphernodeRemoved(address indexed node);\\n\\n    function isCyphernodeEligible(address cyphernode) external returns (bool);\\n\\n    /// @notice Initiates the committee selection process for a specified E3.\\n    /// @dev This function MUST revert when not called by the Enclave contract.\\n    /// @param e3Id ID of the E3 for which to select the committee.\\n    /// @param filter The address of the filter responsible for the committee selection process.\\n    /// @param threshold The M/N threshold for the committee.\\n    /// @return success True if committee selection was successfully initiated.\\n    function requestCommittee(\\n        uint256 e3Id,\\n        address filter,\\n        uint32[2] calldata threshold\\n    ) external returns (bool success);\\n\\n    /// @notice Publishes the public key resulting from the committee selection process.\\n    /// @dev This function MUST revert if not called by the previously selected filter.\\n    /// @param e3Id ID of the E3 for which to select the committee.\\n    /// @param publicKey The public key generated by the selected committee.\\n    function publishCommittee(\\n        uint256 e3Id,\\n        bytes calldata proof,\\n        bytes calldata publicKey\\n    ) external;\\n\\n    /// @notice This function should be called by the Enclave contract to get the public key of a committee.\\n    /// @dev This function MUST revert if no committee has been requested for the given E3.\\n    /// @dev This function MUST revert if the committee has not yet published a public key.\\n    /// @param e3Id ID of the E3 for which to get the committee public key.\\n    /// @return publicKey The public key of the committee.\\n    function committeePublicKey(\\n        uint256 e3Id\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x60af5d66db32528f5032fe083218f180ab83f3199bcf090bed7249c28bc18104\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IRegistryFilter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.26;\\n\\ninterface IRegistryFilter {\\n    function requestCommittee(\\n        uint256 e3Id,\\n        uint32[2] calldata threshold\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xec67f88f2cbf46e28d4835669ef3dd2320afe5b0324423944037c16fc3f42195\",\"license\":\"LGPL-3.0-only\"},\"contracts/registry/NaiveRegistryFilter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.26;\\n\\nimport { ICyphernodeRegistry } from \\\"../interfaces/ICyphernodeRegistry.sol\\\";\\nimport { IRegistryFilter } from \\\"../interfaces/IRegistryFilter.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract NaiveRegistryFilter is IRegistryFilter, OwnableUpgradeable {\\n    struct Committee {\\n        address[] nodes;\\n        uint32[2] threshold;\\n        bytes publicKey;\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                 Storage Variables                      //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    address public registry;\\n\\n    mapping(uint256 e3 => Committee committee) public committees;\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                        Errors                          //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    error CommitteeAlreadyExists();\\n    error CommitteeAlreadyPublished();\\n    error CommitteeDoesNotExist();\\n    error CommitteeNotPublished();\\n    error OnlyRegistry();\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                     Modifiers                          //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    modifier onlyRegistry() {\\n        require(msg.sender == registry, OnlyRegistry());\\n        _;\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                   Initialization                       //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    constructor(address _owner, address _enclave) {\\n        initialize(_owner, _enclave);\\n    }\\n\\n    function initialize(address _owner, address _registry) public initializer {\\n        __Ownable_init(msg.sender);\\n        setRegistry(_registry);\\n        transferOwnership(_owner);\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                  Core Entrypoints                      //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    function requestCommittee(\\n        uint256 e3Id,\\n        uint32[2] calldata threshold\\n    ) external onlyRegistry returns (bool success) {\\n        Committee storage committee = committees[e3Id];\\n        require(committee.threshold.length == 0, CommitteeAlreadyExists());\\n        committee.threshold = threshold;\\n        success = true;\\n    }\\n\\n    function publishCommittee(\\n        uint256 e3Id,\\n        address[] memory nodes,\\n        bytes memory publicKey\\n    ) external onlyOwner {\\n        Committee storage committee = committees[e3Id];\\n        require(\\n            keccak256(committee.publicKey) == keccak256(hex\\\"\\\"),\\n            CommitteeAlreadyPublished()\\n        );\\n        committee.nodes = nodes;\\n        committee.publicKey = publicKey;\\n        ICyphernodeRegistry(registry).publishCommittee(\\n            e3Id,\\n            abi.encode(nodes),\\n            publicKey\\n        );\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                   Set Functions                        //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    function setRegistry(address _registry) public onlyOwner {\\n        registry = _registry;\\n    }\\n}\\n\",\"keccak256\":\"0x1f961c7313a6d24f0c1bfc4455a461eb25d329f85fea57e08a6fc159f9960a5a\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080346101d657601f610e7c38819003918201601f19168301916001600160401b038311848410176101db5780849260409485528339810103126101d657610052602061004b836101f1565b92016101f1565b600080516020610e5c83398151915254604081901c60ff16159290916001600160401b038316801590816101ce575b60011490816101c4575b1590816101bb575b506101aa576001600160401b03198316600117600080516020610e5c8339815191525561010f928461017f575b506100c961028d565b6100d161028d565b6100da33610205565b6100e26102bb565b600080546001600160a01b0319166001600160a01b039290921691909117905561010a6102bb565b610205565b610123575b604051610b5890816103048239f35b68ff000000000000000019600080516020610e5c8339815191525416600080516020610e5c833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1610114565b6001600160481b0319166801000000000000000117600080516020610e5c83398151915255386100c0565b63f92ee8a960e01b60005260046000fd5b90501538610093565b303b15915061008b565b859150610081565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101d657565b6001600160a01b03168015610277577f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b0319811683179091556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b631e4fbdf760e01b600052600060045260246000fd5b60ff600080516020610e5c8339815191525460401c16156102aa57565b631afcd79f60e31b60005260046000fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031633036102ee57565b63118cdaa760e01b6000523360045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c90816329f73b9c14610480575080632b20a4f614610435578063485cc9551461023d578063715018a6146101a45780637b1039991461017e5780638da5cb5b14610138578063a91ee0dc146100f9578063f2fde38b146100cc5763f5e820fd1461008457600080fd5b346100c95760203660031901126100c9576100b1600260406100c593600435815260016020522001610921565b6040519182916020835260208301906109c5565b0390f35b80fd5b50346100c95760203660031901126100c9576100f66100e96108cc565b6100f1610ac3565b610a1d565b80f35b50346100c95760203660031901126100c9576001600160a01b0361011b6108cc565b610123610ac3565b166001600160a01b0319600054161760005580f35b50346100c957806003193601126100c95760206001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005416604051908152f35b50346100c957806003193601126100c9576001600160a01b036020915416604051908152f35b50346100c957806003193601126100c9576101bd610ac3565b806001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031981167f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346100c95760403660031901126100c9576102576108cc565b602435906001600160a01b0382168203610431577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00549160ff8360401c16159267ffffffffffffffff811680159081610429575b600114908161041f575b159081610416575b506104075767ffffffffffffffff1981166001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005561034392916001600160a01b0391856103c8575b50610310610b0b565b610318610b0b565b61032133610a1d565b610329610ac3565b166001600160a01b031960005416176000556100f1610ac3565b61034a5780f35b68ff0000000000000000197ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b68ffffffffffffffffff191668010000000000000001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005538610307565b63f92ee8a960e01b8552600485fd5b905015386102bd565b303b1591506102b5565b8591506102ab565b8280fd5b50346100c95760603660031901126100c957366064116100c957806001600160a01b03600492541633036104745760016020526334c2a65d60e11b8152fd5b6310f5403960e31b8152fd5b82346100c95760603660031901126100c9576004356024359267ffffffffffffffff841161043157366023850112156104315783600401359367ffffffffffffffff8511610880578460051b946104da6020870184610894565b82526020820190602482968201019036821161084457602401915b81831061085c575050506044359167ffffffffffffffff831161070b573660238401121561070b57826004013567ffffffffffffffff81116108485760405193610549601f8301601f191660200186610894565b8185523660248383010111610844578186926024602093018388013785010152610571610ac3565b80845260016020526040842060028101907fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4706105ac83610921565b60208151910120036108355783519067ffffffffffffffff821161082157680100000000000000008211610821578054828255808310610806575b508790875260208720875b8381106107e95750505050835167ffffffffffffffff81116107d55761061882546108e7565b601f811161079a575b50806020601f821160011461073957879161072e575b508160011b916000199060031b1c19161790555b6001600160a01b0384541660405192604084019060208086015251809152606084019690865b81811061070f5750505061069283869796959603601f198101855284610894565b803b1561070b578392836106cd936106df6040519889968795869463d9bbec9560e01b865260048601526060602486015260648501906109c5565b838103600319016044850152906109c5565b03925af180156106fe576106f05780f35b6106f991610894565b818180f35b50604051903d90823e3d90fd5b8380fd5b82516001600160a01b0316895260209889019890920191600101610671565b905085015188610637565b8388528088209150601f198316885b81811061078257509083600194939210610769575b5050811b01905561064b565b87015160001960f88460031b161c19169055888061075d565b9192602060018192868c015181550194019201610748565b6107c59083885260208820601f840160051c810191602085106107cb575b601f0160051c0190610a06565b87610621565b90915081906107b8565b634e487b7160e01b86526041600452602486fd5b60019060206001600160a01b0385511694019381840155016105f2565b8188526020882061081b918101908401610a06565b886105e7565b634e487b7160e01b87526041600452602487fd5b63632a22bb60e01b8652600486fd5b8580fd5b634e487b7160e01b85526041600452602485fd5b82356001600160a01b038116810361087c578152602092830192016104f5565b8680fd5b634e487b7160e01b84526041600452602484fd5b90601f8019910116810190811067ffffffffffffffff8211176108b657604052565b634e487b7160e01b600052604160045260246000fd5b600435906001600160a01b03821682036108e257565b600080fd5b90600182811c92168015610917575b602083101461090157565b634e487b7160e01b600052602260045260246000fd5b91607f16916108f6565b9060405191826000825492610935846108e7565b80845293600181169081156109a3575060011461095c575b5061095a92500383610894565b565b90506000929192526020600020906000915b81831061098757505090602061095a928201013861094d565b602091935080600191548385890101520191019091849261096e565b90506020925061095a94915060ff191682840152151560051b8201013861094d565b919082519283825260005b8481106109f1575050826000602080949584010152601f8019910116010190565b806020809284010151828286010152016109d0565b818110610a11575050565b60008155600101610a06565b6001600160a01b03168015610aad576001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930054826001600160a01b03198216177f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b631e4fbdf760e01b600052600060045260246000fd5b6001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930054163303610af657565b63118cdaa760e01b6000523360045260246000fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615610b3a57565b631afcd79f60e31b60005260046000fdfea164736f6c634300081a000af0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816329f73b9c14610480575080632b20a4f614610435578063485cc9551461023d578063715018a6146101a45780637b1039991461017e5780638da5cb5b14610138578063a91ee0dc146100f9578063f2fde38b146100cc5763f5e820fd1461008457600080fd5b346100c95760203660031901126100c9576100b1600260406100c593600435815260016020522001610921565b6040519182916020835260208301906109c5565b0390f35b80fd5b50346100c95760203660031901126100c9576100f66100e96108cc565b6100f1610ac3565b610a1d565b80f35b50346100c95760203660031901126100c9576001600160a01b0361011b6108cc565b610123610ac3565b166001600160a01b0319600054161760005580f35b50346100c957806003193601126100c95760206001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005416604051908152f35b50346100c957806003193601126100c9576001600160a01b036020915416604051908152f35b50346100c957806003193601126100c9576101bd610ac3565b806001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031981167f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346100c95760403660031901126100c9576102576108cc565b602435906001600160a01b0382168203610431577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00549160ff8360401c16159267ffffffffffffffff811680159081610429575b600114908161041f575b159081610416575b506104075767ffffffffffffffff1981166001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005561034392916001600160a01b0391856103c8575b50610310610b0b565b610318610b0b565b61032133610a1d565b610329610ac3565b166001600160a01b031960005416176000556100f1610ac3565b61034a5780f35b68ff0000000000000000197ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b68ffffffffffffffffff191668010000000000000001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005538610307565b63f92ee8a960e01b8552600485fd5b905015386102bd565b303b1591506102b5565b8591506102ab565b8280fd5b50346100c95760603660031901126100c957366064116100c957806001600160a01b03600492541633036104745760016020526334c2a65d60e11b8152fd5b6310f5403960e31b8152fd5b82346100c95760603660031901126100c9576004356024359267ffffffffffffffff841161043157366023850112156104315783600401359367ffffffffffffffff8511610880578460051b946104da6020870184610894565b82526020820190602482968201019036821161084457602401915b81831061085c575050506044359167ffffffffffffffff831161070b573660238401121561070b57826004013567ffffffffffffffff81116108485760405193610549601f8301601f191660200186610894565b8185523660248383010111610844578186926024602093018388013785010152610571610ac3565b80845260016020526040842060028101907fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4706105ac83610921565b60208151910120036108355783519067ffffffffffffffff821161082157680100000000000000008211610821578054828255808310610806575b508790875260208720875b8381106107e95750505050835167ffffffffffffffff81116107d55761061882546108e7565b601f811161079a575b50806020601f821160011461073957879161072e575b508160011b916000199060031b1c19161790555b6001600160a01b0384541660405192604084019060208086015251809152606084019690865b81811061070f5750505061069283869796959603601f198101855284610894565b803b1561070b578392836106cd936106df6040519889968795869463d9bbec9560e01b865260048601526060602486015260648501906109c5565b838103600319016044850152906109c5565b03925af180156106fe576106f05780f35b6106f991610894565b818180f35b50604051903d90823e3d90fd5b8380fd5b82516001600160a01b0316895260209889019890920191600101610671565b905085015188610637565b8388528088209150601f198316885b81811061078257509083600194939210610769575b5050811b01905561064b565b87015160001960f88460031b161c19169055888061075d565b9192602060018192868c015181550194019201610748565b6107c59083885260208820601f840160051c810191602085106107cb575b601f0160051c0190610a06565b87610621565b90915081906107b8565b634e487b7160e01b86526041600452602486fd5b60019060206001600160a01b0385511694019381840155016105f2565b8188526020882061081b918101908401610a06565b886105e7565b634e487b7160e01b87526041600452602487fd5b63632a22bb60e01b8652600486fd5b8580fd5b634e487b7160e01b85526041600452602485fd5b82356001600160a01b038116810361087c578152602092830192016104f5565b8680fd5b634e487b7160e01b84526041600452602484fd5b90601f8019910116810190811067ffffffffffffffff8211176108b657604052565b634e487b7160e01b600052604160045260246000fd5b600435906001600160a01b03821682036108e257565b600080fd5b90600182811c92168015610917575b602083101461090157565b634e487b7160e01b600052602260045260246000fd5b91607f16916108f6565b9060405191826000825492610935846108e7565b80845293600181169081156109a3575060011461095c575b5061095a92500383610894565b565b90506000929192526020600020906000915b81831061098757505090602061095a928201013861094d565b602091935080600191548385890101520191019091849261096e565b90506020925061095a94915060ff191682840152151560051b8201013861094d565b919082519283825260005b8481106109f1575050826000602080949584010152601f8019910116010190565b806020809284010151828286010152016109d0565b818110610a11575050565b60008155600101610a06565b6001600160a01b03168015610aad576001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930054826001600160a01b03198216177f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b631e4fbdf760e01b600052600060045260246000fd5b6001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930054163303610af657565b63118cdaa760e01b6000523360045260246000fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615610b3a57565b631afcd79f60e31b60005260046000fdfea164736f6c634300081a000a",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2140,
        "contract": "contracts/registry/NaiveRegistryFilter.sol:NaiveRegistryFilter",
        "label": "registry",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2145,
        "contract": "contracts/registry/NaiveRegistryFilter.sol:NaiveRegistryFilter",
        "label": "committees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Committee)2138_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)2_storage": {
        "base": "t_uint32",
        "encoding": "inplace",
        "label": "uint32[2]",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(Committee)2138_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NaiveRegistryFilter.Committee)",
        "numberOfBytes": "32",
        "value": "t_struct(Committee)2138_storage"
      },
      "t_struct(Committee)2138_storage": {
        "encoding": "inplace",
        "label": "struct NaiveRegistryFilter.Committee",
        "members": [
          {
            "astId": 2131,
            "contract": "contracts/registry/NaiveRegistryFilter.sol:NaiveRegistryFilter",
            "label": "nodes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2135,
            "contract": "contracts/registry/NaiveRegistryFilter.sol:NaiveRegistryFilter",
            "label": "threshold",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)2_storage"
          },
          {
            "astId": 2137,
            "contract": "contracts/registry/NaiveRegistryFilter.sol:NaiveRegistryFilter",
            "label": "publicKey",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
