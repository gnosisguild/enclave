{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IE3Program.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.8.27;\n\nimport { IInputValidator } from \"./IInputValidator.sol\";\n\ninterface IE3Program {\n    /// @notice This function should be called by the Enclave contract to validate the computation parameters.\n    /// @param e3Id ID of the E3.\n    /// @param seed Seed for the computation.\n    /// @param e3ProgramParams ABI encoded computation parameters.\n    /// @param computeProviderParams ABI encoded compute provider parameters.\n    /// @return encryptionSchemeId ID of the encryption scheme to be used for the computation.\n    /// @return inputValidator The input validator to be used for the computation.\n    function validate(\n        uint256 e3Id,\n        uint256 seed,\n        bytes calldata e3ProgramParams,\n        bytes calldata computeProviderParams\n    )\n        external\n        returns (bytes32 encryptionSchemeId, IInputValidator inputValidator);\n\n    /// @notice This function should be called by the Enclave contract to verify the decrypted output of an E3.\n    /// @param e3Id ID of the E3.\n    /// @param ciphertextOutputHash The keccak256 hash of output data to be verified.\n    /// @param proof ABI encoded data to verify the ciphertextOutputHash.\n    /// @return success Whether the output data is valid.\n    function verify(\n        uint256 e3Id,\n        bytes32 ciphertextOutputHash,\n        bytes memory proof\n    ) external returns (bool success);\n}\n"
    },
    "contracts/interfaces/IInputValidator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.8.27;\n\ninterface IInputValidator {\n    /// @notice This function should be called by the Enclave contract to validate the\n    /// input of a computation.\n    /// @param sender The account that is submitting the input.\n    /// @param data The input to be verified.\n    /// @return input The decoded, policy-approved application payload.\n    function validate(\n        address sender,\n        bytes memory data\n    ) external returns (bytes memory input);\n}\n"
    },
    "contracts/test/MockE3Program.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.8.27;\n\nimport { IE3Program, IInputValidator } from \"../interfaces/IE3Program.sol\";\n\ncontract MockE3Program is IE3Program {\n    error invalidParams(bytes e3ProgramParams, bytes computeProviderParams);\n    error InvalidInputValidator();\n    error E3AlreadyInitialized();\n    bytes32 public constant ENCRYPTION_SCHEME_ID = keccak256(\"fhe.rs:BFV\");\n\n    IInputValidator public inputValidator;\n    mapping(uint256 e3Id => bytes32 paramsHash) public paramsHashes;\n\n    constructor(IInputValidator _inputValidator) {\n        if (address(_inputValidator) == address(0)) {\n            revert InvalidInputValidator();\n        }\n\n        inputValidator = _inputValidator;\n    }\n\n    function validate(\n        uint256 e3Id,\n        uint256,\n        bytes calldata e3ProgramParams,\n        bytes calldata computeProviderParams\n    ) external returns (bytes32, IInputValidator) {\n        require(\n            computeProviderParams.length == 32,\n            invalidParams(e3ProgramParams, computeProviderParams)\n        );\n\n        require(paramsHashes[e3Id] == bytes32(0), E3AlreadyInitialized());\n        paramsHashes[e3Id] = keccak256(e3ProgramParams);\n\n        paramsHashes[e3Id] = keccak256(e3ProgramParams);\n        return (ENCRYPTION_SCHEME_ID, inputValidator);\n    }\n\n    function verify(\n        uint256,\n        bytes32,\n        bytes memory data\n    ) external pure returns (bool success) {\n        data;\n        if (data.length > 0) success = true;\n    }\n}\n"
    },
    "contracts/test/MockInputValidator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.8.27;\n\nimport { IInputValidator } from \"../interfaces/IInputValidator.sol\";\n\n/// @title MockInputValidator.\n/// @notice Enclave Input Validator\ncontract MockInputValidator is IInputValidator {\n    error InvalidInput();\n\n    /// @notice Validates input\n    /// @param sender The account that is submitting the input.\n    /// @param data The input to be verified.\n    /// @return input The decoded, policy-approved application payload.\n    function validate(\n        address sender,\n        bytes memory data\n    ) external pure returns (bytes memory input) {\n        if (data.length == 3 || sender == address(0)) {\n            revert InvalidInput();\n        }\n\n        input = data;\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}