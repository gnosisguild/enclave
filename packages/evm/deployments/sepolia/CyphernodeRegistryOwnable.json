{
  "address": "0xF9E3aeB059D699Ac4541625DE81062d6D8ad7e85",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_enclave",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CommitteeAlreadyPublished",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitteeAlreadyRequested",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitteeDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitteeNotPublished",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "node",
          "type": "address"
        }
      ],
      "name": "CyphernodeNotEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyEnclave",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "CommitteePublished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "filter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32[2]",
          "name": "threshold",
          "type": "uint32[2]"
        }
      ],
      "name": "CommitteeRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "node",
          "type": "address"
        }
      ],
      "name": "CyphernodeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "node",
          "type": "address"
        }
      ],
      "name": "CyphernodeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "enclave",
          "type": "address"
        }
      ],
      "name": "EnclaveSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "node",
          "type": "address"
        }
      ],
      "name": "addCyphernode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "committeePublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enclave",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_enclave",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "node",
          "type": "address"
        }
      ],
      "name": "isCyphernodeEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyphernode",
          "type": "address"
        }
      ],
      "name": "isEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "publicKeys",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "publishCommittee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "node",
          "type": "address"
        }
      ],
      "name": "removeCyphernode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "filter",
          "type": "address"
        },
        {
          "internalType": "uint32[2]",
          "name": "threshold",
          "type": "uint32[2]"
        }
      ],
      "name": "requestCommittee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "contract IRegistryFilter",
          "name": "filter",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_enclave",
          "type": "address"
        }
      ],
      "name": "setEnclave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x52c081e0009793b5db42f4b17258c27a2a11c40c46df6fad4d183de612d68b43",
  "receipt": {
    "to": null,
    "from": "0x485E60C486671E932fd9C53d4110cdEab1E7F0eb",
    "contractAddress": "0xF9E3aeB059D699Ac4541625DE81062d6D8ad7e85",
    "transactionIndex": 9,
    "gasUsed": "860580",
    "logsBloom": "0x
    "blockHash": "0x8d6af7fa19913d7eb201f04a7307ee3844cdc4bda86b43ca3ab7e1522b577cab",
    "transactionHash": "0x52c081e0009793b5db42f4b17258c27a2a11c40c46df6fad4d183de612d68b43",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 6668198,
        "transactionHash": "0x52c081e0009793b5db42f4b17258c27a2a11c40c46df6fad4d183de612d68b43",
        "address": "0xF9E3aeB059D699Ac4541625DE81062d6D8ad7e85",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000485e60c486671e932fd9c53d4110cdeab1e7f0eb"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x8d6af7fa19913d7eb201f04a7307ee3844cdc4bda86b43ca3ab7e1522b577cab"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 6668198,
        "transactionHash": "0x52c081e0009793b5db42f4b17258c27a2a11c40c46df6fad4d183de612d68b43",
        "address": "0xF9E3aeB059D699Ac4541625DE81062d6D8ad7e85",
        "topics": [
          "0x2c8267accd82e977550ed2349c73311183cd22e306347be4453c8d130995e3c9",
          "0x000000000000000000000000083b0ae25fd41469fd8857027b40e3f49a169375"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x8d6af7fa19913d7eb201f04a7307ee3844cdc4bda86b43ca3ab7e1522b577cab"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 6668198,
        "transactionHash": "0x52c081e0009793b5db42f4b17258c27a2a11c40c46df6fad4d183de612d68b43",
        "address": "0xF9E3aeB059D699Ac4541625DE81062d6D8ad7e85",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000485e60c486671e932fd9c53d4110cdeab1e7f0eb",
          "0x000000000000000000000000485e60c486671e932fd9c53d4110cdeab1e7f0eb"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x8d6af7fa19913d7eb201f04a7307ee3844cdc4bda86b43ca3ab7e1522b577cab"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 6668198,
        "transactionHash": "0x52c081e0009793b5db42f4b17258c27a2a11c40c46df6fad4d183de612d68b43",
        "address": "0xF9E3aeB059D699Ac4541625DE81062d6D8ad7e85",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 19,
        "blockHash": "0x8d6af7fa19913d7eb201f04a7307ee3844cdc4bda86b43ca3ab7e1522b577cab"
      }
    ],
    "blockNumber": 6668198,
    "cumulativeGasUsed": "2286050",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x485E60C486671E932fd9C53d4110cdEab1E7F0eb",
    "0x083b0AE25fD41469Fd8857027B40e3f49A169375"
  ],
  "numDeployments": 1,
  "solcInputHash": "d0e6e4f19028714f394c36db62dff2be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_enclave\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CommitteeAlreadyPublished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitteeAlreadyRequested\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitteeDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitteeNotPublished\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"CyphernodeNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyEnclave\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"CommitteePublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32[2]\",\"name\":\"threshold\",\"type\":\"uint32[2]\"}],\"name\":\"CommitteeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"CyphernodeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"CyphernodeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enclave\",\"type\":\"address\"}],\"name\":\"EnclaveSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"addCyphernode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"committeePublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enclave\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_enclave\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isCyphernodeEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyphernode\",\"type\":\"address\"}],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"publicKeys\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"publishCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"removeCyphernode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"},{\"internalType\":\"uint32[2]\",\"name\":\"threshold\",\"type\":\"uint32[2]\"}],\"name\":\"requestCommittee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"contract IRegistryFilter\",\"name\":\"filter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enclave\",\"type\":\"address\"}],\"name\":\"setEnclave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"CommitteePublished(uint256,bytes)\":{\"params\":{\"e3Id\":\"ID of the E3 for which the committee was selected.\",\"publicKey\":\"Public key of the committee.\"}},\"CommitteeRequested(uint256,address,uint32[2])\":{\"params\":{\"e3Id\":\"ID of the E3 for which the committee was selected.\",\"filter\":\"Address of the contract that will coordinate committee selection.\",\"threshold\":\"The M/N threshold for the committee.\"}},\"EnclaveSet(address)\":{\"params\":{\"enclave\":\"Address of the enclave contract.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"committeePublicKey(uint256)\":{\"details\":\"This function MUST revert if no committee has been requested for the given E3.This function MUST revert if the committee has not yet published a public key.\",\"params\":{\"e3Id\":\"ID of the E3 for which to get the committee public key.\"},\"returns\":{\"publicKey\":\"The public key of the committee.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"requestCommittee(uint256,address,uint32[2])\":{\"details\":\"This function MUST revert when not called by the Enclave contract.\",\"params\":{\"e3Id\":\"ID of the E3 for which to select the committee.\",\"filter\":\"The address of the filter responsible for the committee selection process.\",\"threshold\":\"The M/N threshold for the committee.\"},\"returns\":{\"success\":\"True if committee selection was successfully initiated.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"CommitteePublished(uint256,bytes)\":{\"notice\":\"This event MUST be emitted when a committee is selected for an E3.\"},\"CommitteeRequested(uint256,address,uint32[2])\":{\"notice\":\"This event MUST be emitted when a committee is selected for an E3.\"},\"CyphernodeAdded(address)\":{\"notice\":\"This event MUST be emitted when a cyphernode is added to the registry.\"},\"CyphernodeRemoved(address)\":{\"notice\":\"This event MUST be emitted when a cyphernode is removed from the registry.\"},\"EnclaveSet(address)\":{\"notice\":\"This event MUST be emitted when `enclave` is set.\"}},\"kind\":\"user\",\"methods\":{\"committeePublicKey(uint256)\":{\"notice\":\"This function should be called by the Enclave contract to get the public key of a committee.\"},\"requestCommittee(uint256,address,uint32[2])\":{\"notice\":\"Initiates the committee selection process for a specified E3.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/CyphernodeRegistryOwnable.sol\":\"CyphernodeRegistryOwnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"contracts/interfaces/ICyphernodeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.26;\\n\\ninterface ICyphernodeRegistry {\\n    /// @notice This event MUST be emitted when a committee is selected for an E3.\\n    /// @param e3Id ID of the E3 for which the committee was selected.\\n    /// @param filter Address of the contract that will coordinate committee selection.\\n    /// @param threshold The M/N threshold for the committee.\\n    event CommitteeRequested(\\n        uint256 indexed e3Id,\\n        address filter,\\n        uint32[2] threshold\\n    );\\n\\n    /// @notice This event MUST be emitted when a committee is selected for an E3.\\n    /// @param e3Id ID of the E3 for which the committee was selected.\\n    /// @param publicKey Public key of the committee.\\n    event CommitteePublished(uint256 indexed e3Id, bytes publicKey);\\n\\n    /// @notice This event MUST be emitted when `enclave` is set.\\n    /// @param enclave Address of the enclave contract.\\n    event EnclaveSet(address indexed enclave);\\n\\n    /// @notice This event MUST be emitted when a cyphernode is added to the registry.\\n    event CyphernodeAdded(address indexed node);\\n\\n    /// @notice This event MUST be emitted when a cyphernode is removed from the registry.\\n    event CyphernodeRemoved(address indexed node);\\n\\n    function isCyphernodeEligible(address cyphernode) external returns (bool);\\n\\n    /// @notice Initiates the committee selection process for a specified E3.\\n    /// @dev This function MUST revert when not called by the Enclave contract.\\n    /// @param e3Id ID of the E3 for which to select the committee.\\n    /// @param filter The address of the filter responsible for the committee selection process.\\n    /// @param threshold The M/N threshold for the committee.\\n    /// @return success True if committee selection was successfully initiated.\\n    function requestCommittee(\\n        uint256 e3Id,\\n        address filter,\\n        uint32[2] calldata threshold\\n    ) external returns (bool success);\\n\\n    /// @notice Publishes the public key resulting from the committee selection process.\\n    /// @dev This function MUST revert if not called by the previously selected filter.\\n    /// @param e3Id ID of the E3 for which to select the committee.\\n    /// @param publicKey The public key generated by the selected committee.\\n    function publishCommittee(\\n        uint256 e3Id,\\n        bytes calldata proof,\\n        bytes calldata publicKey\\n    ) external;\\n\\n    /// @notice This function should be called by the Enclave contract to get the public key of a committee.\\n    /// @dev This function MUST revert if no committee has been requested for the given E3.\\n    /// @dev This function MUST revert if the committee has not yet published a public key.\\n    /// @param e3Id ID of the E3 for which to get the committee public key.\\n    /// @return publicKey The public key of the committee.\\n    function committeePublicKey(\\n        uint256 e3Id\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x60af5d66db32528f5032fe083218f180ab83f3199bcf090bed7249c28bc18104\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IRegistryFilter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.26;\\n\\ninterface IRegistryFilter {\\n    function requestCommittee(\\n        uint256 e3Id,\\n        uint32[2] calldata threshold\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xec67f88f2cbf46e28d4835669ef3dd2320afe5b0324423944037c16fc3f42195\",\"license\":\"LGPL-3.0-only\"},\"contracts/registry/CyphernodeRegistryOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.26;\\n\\nimport { ICyphernodeRegistry } from \\\"../interfaces/ICyphernodeRegistry.sol\\\";\\nimport { IRegistryFilter } from \\\"../interfaces/IRegistryFilter.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract CyphernodeRegistryOwnable is ICyphernodeRegistry, OwnableUpgradeable {\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                 Storage Variables                      //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    address public enclave;\\n\\n    mapping(address cyphernode => bool isEnabled) public isEnabled;\\n\\n    mapping(uint256 e3Id => IRegistryFilter filter) public requests;\\n    mapping(uint256 e3Id => bytes publicKey) public publicKeys;\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                        Errors                          //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    error CommitteeAlreadyRequested();\\n    error CommitteeAlreadyPublished();\\n    error CommitteeDoesNotExist();\\n    error CommitteeNotPublished();\\n    error CyphernodeNotEnabled(address node);\\n    error OnlyEnclave();\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                     Modifiers                          //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    modifier onlyEnclave() {\\n        require(msg.sender == enclave, OnlyEnclave());\\n        _;\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                   Initialization                       //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    constructor(address _owner, address _enclave) {\\n        initialize(_owner, _enclave);\\n    }\\n\\n    function initialize(address _owner, address _enclave) public initializer {\\n        __Ownable_init(msg.sender);\\n        setEnclave(_enclave);\\n        transferOwnership(_owner);\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                  Core Entrypoints                      //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    function requestCommittee(\\n        uint256 e3Id,\\n        address filter,\\n        uint32[2] calldata threshold\\n    ) external onlyEnclave returns (bool success) {\\n        require(\\n            requests[e3Id] == IRegistryFilter(address(0)),\\n            CommitteeAlreadyRequested()\\n        );\\n        requests[e3Id] = IRegistryFilter(filter);\\n\\n        IRegistryFilter(filter).requestCommittee(e3Id, threshold);\\n        emit CommitteeRequested(e3Id, filter, threshold);\\n        success = true;\\n    }\\n\\n    function publishCommittee(\\n        uint256 e3Id,\\n        bytes calldata,\\n        bytes calldata publicKey\\n    ) external {\\n        // only to be published by the filter\\n        require(address(requests[e3Id]) == msg.sender, CommitteeDoesNotExist());\\n\\n        // for (uint256 i = 0; i < cyphernodes.length; i++) {\\n        //     require(\\n        //         isEnabled[cyphernodes[i]] == true,\\n        //         CyphernodeNotEnabled(cyphernodes[i])\\n        //     );\\n        // }\\n\\n        publicKeys[e3Id] = publicKey;\\n        emit CommitteePublished(e3Id, publicKey);\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                   Set Functions                        //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    function setEnclave(address _enclave) public onlyOwner {\\n        enclave = _enclave;\\n        emit EnclaveSet(_enclave);\\n    }\\n\\n    function addCyphernode(address node) external onlyOwner {\\n        isEnabled[node] = true;\\n        emit CyphernodeAdded(node);\\n    }\\n\\n    function removeCyphernode(address node) external onlyOwner {\\n        isEnabled[node] = false;\\n        emit CyphernodeRemoved(node);\\n    }\\n\\n    function isCyphernodeEligible(address node) external view returns (bool) {\\n        return isEnabled[node];\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                   Get Functions                        //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    function committeePublicKey(\\n        uint256 e3Id\\n    ) external view returns (bytes memory publicKey) {\\n        publicKey = publicKeys[e3Id];\\n        require(publicKey.length > 0, CommitteeNotPublished());\\n    }\\n}\\n\",\"keccak256\":\"0x4cfad952b8b65dba77a5adf39dba5d1f7ff8d0a3661793bf155fea39f9d3f8e6\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081632a8dc588146109b957508063476422f814610952578063485cc9551461074657806370e36bbe146106e3578063715018a61461064a578063770ad208146105e057806381d12c58146105ab5780638da5cb5b146105655780639015d371146105265780639ccb58d5146103cc578063c680f41014610394578063d9bbec9514610170578063dbb06c9314610149578063e82f3b70146100f45763f2fde38b146100c457600080fd5b346100ef5760203660031901126100ef576100ed6100e06109f4565b6100e8610c76565b610bd0565b005b600080fd5b346100ef5760203660031901126100ef57600435600052600360205261011d6040600020610a7c565b805115610138576101349060405191829182610b20565b0390f35b6322e679e360e11b60005260046000fd5b346100ef5760003660031901126100ef5760206001600160a01b0360005416604051908152f35b346100ef5760603660031901126100ef5760043560243567ffffffffffffffff81116100ef576101a4903690600401610b69565b505060443567ffffffffffffffff81116100ef576101c6903690600401610b69565b908260005260026020526001600160a01b0360406000205416330361038357826000526003602052604060002067ffffffffffffffff831161036d5761020c8154610a20565b601f8111610325575b506000601f841160011461029d5791604091847f8d0ca30515bbff1268ae5868080463444e5002373f7bc7d8d8869dca0a5ffc019594600091610292575b508460011b906000198660031b1c19161790555b82825193849260208452816020850152848401376000828201840152601f01601f19168101030190a2005b905082013587610253565b8181526020812090601f198516815b81811061030d57509160409391867f8d0ca30515bbff1268ae5868080463444e5002373f7bc7d8d8869dca0a5ffc01979694106102f3575b5050600184811b019055610267565b830135600019600387901b60f8161c1916905586806102e4565b919260206001819286890135815501940192016102ac565b816000526020600020601f850160051c81019160208610610363575b601f0160051c01905b8181106103575750610215565b6000815560010161034a565b9091508190610341565b634e487b7160e01b600052604160045260246000fd5b632a17a1f360e01b60005260046000fd5b346100ef5760203660031901126100ef5760043560005260036020526101346103c06040600020610a7c565b60405191829182610b20565b346100ef5760803660031901126100ef576004356103e8610a0a565b366084116100ef576001600160a01b03600054163303610515578160005260026020526001600160a01b0360406000205416610504576001600160a01b03168160005260026020526040600020816001600160a01b0319825416179055604051631590527b60e11b815282600482015261046460248201610b97565b6020816064816000865af180156104f8576104bd575b5060607fa17377d4a5c0ff5c67888a6b08d9bf3a8505b47e922b6186b259471ebf12738e916040519081526104b160208201610b97565ba2602060405160018152f35b6020813d6020116104f0575b816104d660209383610a5a565b810103126100ef575180151581036100ef5750606061047a565b3d91506104c9565b6040513d6000823e3d90fd5b6374ff462560e11b60005260046000fd5b63e4c2a7eb60e01b60005260046000fd5b346100ef5760203660031901126100ef576001600160a01b036105476109f4565b166000526001602052602060ff604060002054166040519015158152f35b346100ef5760003660031901126100ef5760206001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005416604051908152f35b346100ef5760203660031901126100ef57600435600052600260205260206001600160a01b0360406000205416604051908152f35b346100ef5760203660031901126100ef576001600160a01b036106016109f4565b610609610c76565b168060005260016020526040600020600160ff198254161790557f0fdc359cb937ddbe7734e324351ff282307ad333751a9e90f17e7330157ea579600080a2005b346100ef5760003660031901126100ef57610663610c76565b60006001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031981167f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100ef5760203660031901126100ef576001600160a01b036107046109f4565b61070c610c76565b16806001600160a01b031960005416176000557f2c8267accd82e977550ed2349c73311183cd22e306347be4453c8d130995e3c9600080a2005b346100ef5760403660031901126100ef5761075f6109f4565b610767610a0a565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00549160ff8360401c16159267ffffffffffffffff81168015908161094a575b6001149081610940575b159081610937575b506109265767ffffffffffffffff1981166001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055610864926001600160a01b0391856108e7575b5061080b610cbe565b610813610cbe565b61081c33610bd0565b610824610c76565b16806001600160a01b031960005416176000557f2c8267accd82e977550ed2349c73311183cd22e306347be4453c8d130995e3c9600080a26100e8610c76565b61086a57005b68ff0000000000000000197ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b68ffffffffffffffffff191668010000000000000001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005585610802565b63f92ee8a960e01b60005260046000fd5b905015856107b9565b303b1591506107b1565b8591506107a7565b346100ef5760203660031901126100ef576001600160a01b036109736109f4565b61097b610c76565b16806000526001602052604060002060ff1981541690557f07f3f62f2502752da9299b12b0a9966cb97ace5e3ce476d04649d5f588ec4491600080a2005b346100ef5760203660031901126100ef576020906001600160a01b036109dd6109f4565b166000526001825260ff6040600020541615158152f35b600435906001600160a01b03821682036100ef57565b602435906001600160a01b03821682036100ef57565b90600182811c92168015610a50575b6020831014610a3a57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610a2f565b90601f8019910116810190811067ffffffffffffffff82111761036d57604052565b9060405191826000825492610a9084610a20565b8084529360018116908115610afe5750600114610ab7575b50610ab592500383610a5a565b565b90506000929192526020600020906000915b818310610ae2575050906020610ab59282010138610aa8565b6020919350806001915483858901015201910190918492610ac9565b905060209250610ab594915060ff191682840152151560051b82010138610aa8565b91909160208152825180602083015260005b818110610b53575060409293506000838284010152601f8019910116010190565b8060208092870101516040828601015201610b32565b9181601f840112156100ef5782359167ffffffffffffffff83116100ef57602083818601950101116100ef57565b60446000915b60028310610baa57505050565b81359063ffffffff82168092036100ef5760208160019382935201920192019190610b9d565b6001600160a01b03168015610c60576001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930054826001600160a01b03198216177f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b631e4fbdf760e01b600052600060045260246000fd5b6001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930054163303610ca957565b63118cdaa760e01b6000523360045260246000fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615610ced57565b631afcd79f60e31b60005260046000fdfea164736f6c634300081a000a",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "CommitteePublished(uint256,bytes)": {
        "params": {
          "e3Id": "ID of the E3 for which the committee was selected.",
          "publicKey": "Public key of the committee."
        }
      },
      "CommitteeRequested(uint256,address,uint32[2])": {
        "params": {
          "e3Id": "ID of the E3 for which the committee was selected.",
          "filter": "Address of the contract that will coordinate committee selection.",
          "threshold": "The M/N threshold for the committee."
        }
      },
      "EnclaveSet(address)": {
        "params": {
          "enclave": "Address of the enclave contract."
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "committeePublicKey(uint256)": {
        "details": "This function MUST revert if no committee has been requested for the given E3.This function MUST revert if the committee has not yet published a public key.",
        "params": {
          "e3Id": "ID of the E3 for which to get the committee public key."
        },
        "returns": {
          "publicKey": "The public key of the committee."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "requestCommittee(uint256,address,uint32[2])": {
        "details": "This function MUST revert when not called by the Enclave contract.",
        "params": {
          "e3Id": "ID of the E3 for which to select the committee.",
          "filter": "The address of the filter responsible for the committee selection process.",
          "threshold": "The M/N threshold for the committee."
        },
        "returns": {
          "success": "True if committee selection was successfully initiated."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CommitteePublished(uint256,bytes)": {
        "notice": "This event MUST be emitted when a committee is selected for an E3."
      },
      "CommitteeRequested(uint256,address,uint32[2])": {
        "notice": "This event MUST be emitted when a committee is selected for an E3."
      },
      "CyphernodeAdded(address)": {
        "notice": "This event MUST be emitted when a cyphernode is added to the registry."
      },
      "CyphernodeRemoved(address)": {
        "notice": "This event MUST be emitted when a cyphernode is removed from the registry."
      },
      "EnclaveSet(address)": {
        "notice": "This event MUST be emitted when `enclave` is set."
      }
    },
    "kind": "user",
    "methods": {
      "committeePublicKey(uint256)": {
        "notice": "This function should be called by the Enclave contract to get the public key of a committee."
      },
      "requestCommittee(uint256,address,uint32[2])": {
        "notice": "Initiates the committee selection process for a specified E3."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1860,
        "contract": "contracts/registry/CyphernodeRegistryOwnable.sol:CyphernodeRegistryOwnable",
        "label": "enclave",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1864,
        "contract": "contracts/registry/CyphernodeRegistryOwnable.sol:CyphernodeRegistryOwnable",
        "label": "isEnabled",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1869,
        "contract": "contracts/registry/CyphernodeRegistryOwnable.sol:CyphernodeRegistryOwnable",
        "label": "requests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_contract(IRegistryFilter)1846)"
      },
      {
        "astId": 1873,
        "contract": "contracts/registry/CyphernodeRegistryOwnable.sol:CyphernodeRegistryOwnable",
        "label": "publicKeys",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IRegistryFilter)1846": {
        "encoding": "inplace",
        "label": "contract IRegistryFilter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_contract(IRegistryFilter)1846)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IRegistryFilter)",
        "numberOfBytes": "32",
        "value": "t_contract(IRegistryFilter)1846"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
