{
  "address": "0x55eb3E7e3fFd6c5B7EF2C52c0744DC78aD26D2C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract ICiphernodeRegistry",
          "name": "_ciphernodeRegistry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "CiphertextOutputAlreadyPublished",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "CiphertextOutputNotPublished",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitteeSelectionFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "E3AlreadyActivated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "E3DoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "E3Expired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "E3NotActivated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "E3NotReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IE3Program",
          "name": "e3Program",
          "type": "address"
        }
      ],
      "name": "E3ProgramNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "InputDeadlineNotPassed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "InputDeadlinePassed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICiphernodeRegistry",
          "name": "ciphernodeRegistry",
          "type": "address"
        }
      ],
      "name": "InvalidCiphernodeRegistry",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IInputValidator",
          "name": "inputValidator",
          "type": "address"
        }
      ],
      "name": "InvalidComputationRequest",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "InvalidDuration",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encryptionSchemeId",
          "type": "bytes32"
        }
      ],
      "name": "InvalidEncryptionScheme",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "output",
          "type": "bytes"
        }
      ],
      "name": "InvalidOutput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStartWindow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[2]",
          "name": "threshold",
          "type": "uint32[2]"
        }
      ],
      "name": "InvalidThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LeafAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LeafCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LeafGreaterThanSnarkScalarField",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ModuleAlreadyEnabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ModuleNotEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "PaymentRequired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "PlaintextOutputAlreadyPublished",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ciphernodeRegistry",
          "type": "address"
        }
      ],
      "name": "CiphernodeRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ciphertextOutput",
          "type": "bytes"
        }
      ],
      "name": "CiphertextOutputPublished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "committeePublicKey",
          "type": "bytes"
        }
      ],
      "name": "E3Activated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IE3Program",
          "name": "e3Program",
          "type": "address"
        }
      ],
      "name": "E3ProgramDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IE3Program",
          "name": "e3Program",
          "type": "address"
        }
      ],
      "name": "E3ProgramEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "uint32[2]",
              "name": "threshold",
              "type": "uint32[2]"
            },
            {
              "internalType": "uint256",
              "name": "requestBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "startWindow",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "encryptionSchemeId",
              "type": "bytes32"
            },
            {
              "internalType": "contract IE3Program",
              "name": "e3Program",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "e3ProgramParams",
              "type": "bytes"
            },
            {
              "internalType": "contract IInputValidator",
              "name": "inputValidator",
              "type": "address"
            },
            {
              "internalType": "contract IDecryptionVerifier",
              "name": "decryptionVerifier",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "committeePublicKey",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "ciphertextOutput",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "plaintextOutput",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct E3",
          "name": "e3",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "filter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IE3Program",
          "name": "e3Program",
          "type": "address"
        }
      ],
      "name": "E3Requested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "encryptionSchemeId",
          "type": "bytes32"
        }
      ],
      "name": "EncryptionSchemeDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "encryptionSchemeId",
          "type": "bytes32"
        }
      ],
      "name": "EncryptionSchemeEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InputPublished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxDuration",
          "type": "uint256"
        }
      ],
      "name": "MaxDurationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "plaintextOutput",
          "type": "bytes"
        }
      ],
      "name": "PlaintextOutputPublished",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "activate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ciphernodeRegistry",
      "outputs": [
        {
          "internalType": "contract ICiphernodeRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encryptionSchemeId",
          "type": "bytes32"
        }
      ],
      "name": "decryptionVerifiers",
      "outputs": [
        {
          "internalType": "contract IDecryptionVerifier",
          "name": "decryptionVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IE3Program",
          "name": "e3Program",
          "type": "address"
        }
      ],
      "name": "disableE3Program",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encryptionSchemeId",
          "type": "bytes32"
        }
      ],
      "name": "disableEncryptionScheme",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IE3Program",
          "name": "e3Program",
          "type": "address"
        }
      ],
      "name": "e3Programs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "e3s",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "encryptionSchemeId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IE3Program",
          "name": "e3Program",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "e3ProgramParams",
          "type": "bytes"
        },
        {
          "internalType": "contract IInputValidator",
          "name": "inputValidator",
          "type": "address"
        },
        {
          "internalType": "contract IDecryptionVerifier",
          "name": "decryptionVerifier",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "committeePublicKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ciphertextOutput",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "plaintextOutput",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IE3Program",
          "name": "e3Program",
          "type": "address"
        }
      ],
      "name": "enableE3Program",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encryptionSchemeId",
          "type": "bytes32"
        }
      ],
      "name": "getDecryptionVerifier",
      "outputs": [
        {
          "internalType": "contract IDecryptionVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "getE3",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "uint32[2]",
              "name": "threshold",
              "type": "uint32[2]"
            },
            {
              "internalType": "uint256",
              "name": "requestBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "startWindow",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "encryptionSchemeId",
              "type": "bytes32"
            },
            {
              "internalType": "contract IE3Program",
              "name": "e3Program",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "e3ProgramParams",
              "type": "bytes"
            },
            {
              "internalType": "contract IInputValidator",
              "name": "inputValidator",
              "type": "address"
            },
            {
              "internalType": "contract IDecryptionVerifier",
              "name": "decryptionVerifier",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "committeePublicKey",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "ciphertextOutput",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "plaintextOutput",
              "type": "bytes"
            }
          ],
          "internalType": "struct E3",
          "name": "e3",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "getInputRoot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract ICiphernodeRegistry",
          "name": "_ciphernodeRegistry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxDuration",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "inputCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "inputCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        }
      ],
      "name": "inputs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nexte3Id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ciphertextOutput",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "publishCiphertextOutput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "publishInput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "plaintextOutput",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "publishPlaintextOutput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "filter",
          "type": "address"
        },
        {
          "internalType": "uint32[2]",
          "name": "threshold",
          "type": "uint32[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "startWindow",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "contract IE3Program",
          "name": "e3Program",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "e3ProgramParams",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "computeProviderParams",
          "type": "bytes"
        }
      ],
      "name": "request",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "e3Id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "uint32[2]",
              "name": "threshold",
              "type": "uint32[2]"
            },
            {
              "internalType": "uint256",
              "name": "requestBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "startWindow",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "encryptionSchemeId",
              "type": "bytes32"
            },
            {
              "internalType": "contract IE3Program",
              "name": "e3Program",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "e3ProgramParams",
              "type": "bytes"
            },
            {
              "internalType": "contract IInputValidator",
              "name": "inputValidator",
              "type": "address"
            },
            {
              "internalType": "contract IDecryptionVerifier",
              "name": "decryptionVerifier",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "committeePublicKey",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "ciphertextOutput",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "plaintextOutput",
              "type": "bytes"
            }
          ],
          "internalType": "struct E3",
          "name": "e3",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICiphernodeRegistry",
          "name": "_ciphernodeRegistry",
          "type": "address"
        }
      ],
      "name": "setCiphernodeRegistry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encryptionSchemeId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IDecryptionVerifier",
          "name": "decryptionVerifier",
          "type": "address"
        }
      ],
      "name": "setDecryptionVerifier",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDuration",
          "type": "uint256"
        }
      ],
      "name": "setMaxDuration",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xebc4f5263c91ed286bc907a82a642ee1c93cc7b86d36a75196317010ec695309",
  "receipt": {
    "to": null,
    "from": "0x8837e47c4Bb520ADE83AAB761C3B60679443af1B",
    "contractAddress": "0x55eb3E7e3fFd6c5B7EF2C52c0744DC78aD26D2C9",
    "transactionIndex": 180,
    "gasUsed": "2178019",
    "logsBloom": "0x
    "blockHash": "0x35e6bde2d00cb80aabc8c7af84289131649dc636413c6a1a66629198e2193dd9",
    "transactionHash": "0xebc4f5263c91ed286bc907a82a642ee1c93cc7b86d36a75196317010ec695309",
    "logs": [
      {
        "transactionIndex": 180,
        "blockNumber": 8332807,
        "transactionHash": "0xebc4f5263c91ed286bc907a82a642ee1c93cc7b86d36a75196317010ec695309",
        "address": "0x55eb3E7e3fFd6c5B7EF2C52c0744DC78aD26D2C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008837e47c4bb520ade83aab761c3b60679443af1b"
        ],
        "data": "0x",
        "logIndex": 517,
        "blockHash": "0x35e6bde2d00cb80aabc8c7af84289131649dc636413c6a1a66629198e2193dd9"
      },
      {
        "transactionIndex": 180,
        "blockNumber": 8332807,
        "transactionHash": "0xebc4f5263c91ed286bc907a82a642ee1c93cc7b86d36a75196317010ec695309",
        "address": "0x55eb3E7e3fFd6c5B7EF2C52c0744DC78aD26D2C9",
        "topics": [
          "0xba0716ba1ee2ea8ecc4c64119b4537cdb42a99d82acf92af5b87607b8b523552"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000278d00",
        "logIndex": 518,
        "blockHash": "0x35e6bde2d00cb80aabc8c7af84289131649dc636413c6a1a66629198e2193dd9"
      },
      {
        "transactionIndex": 180,
        "blockNumber": 8332807,
        "transactionHash": "0xebc4f5263c91ed286bc907a82a642ee1c93cc7b86d36a75196317010ec695309",
        "address": "0x55eb3E7e3fFd6c5B7EF2C52c0744DC78aD26D2C9",
        "topics": [
          "0x80052b810d39120cf6c976cca504a21703f585521dc7a41c6d241090e6c579b6"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 519,
        "blockHash": "0x35e6bde2d00cb80aabc8c7af84289131649dc636413c6a1a66629198e2193dd9"
      },
      {
        "transactionIndex": 180,
        "blockNumber": 8332807,
        "transactionHash": "0xebc4f5263c91ed286bc907a82a642ee1c93cc7b86d36a75196317010ec695309",
        "address": "0x55eb3E7e3fFd6c5B7EF2C52c0744DC78aD26D2C9",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 520,
        "blockHash": "0x35e6bde2d00cb80aabc8c7af84289131649dc636413c6a1a66629198e2193dd9"
      }
    ],
    "blockNumber": 8332807,
    "cumulativeGasUsed": "27324349",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8837e47c4Bb520ADE83AAB761C3B60679443af1B",
    "0x0000000000000000000000000000000000000001",
    2592000
  ],
  "numDeployments": 2,
  "solcInputHash": "af1a33d80136fdacbd4916512487a8ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract ICiphernodeRegistry\",\"name\":\"_ciphernodeRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"CiphertextOutputAlreadyPublished\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"CiphertextOutputNotPublished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitteeSelectionFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"E3AlreadyActivated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"E3DoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"E3Expired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"E3NotActivated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"E3NotReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IE3Program\",\"name\":\"e3Program\",\"type\":\"address\"}],\"name\":\"E3ProgramNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"InputDeadlineNotPassed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"InputDeadlinePassed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract ICiphernodeRegistry\",\"name\":\"ciphernodeRegistry\",\"type\":\"address\"}],\"name\":\"InvalidCiphernodeRegistry\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IInputValidator\",\"name\":\"inputValidator\",\"type\":\"address\"}],\"name\":\"InvalidComputationRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptionSchemeId\",\"type\":\"bytes32\"}],\"name\":\"InvalidEncryptionScheme\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"output\",\"type\":\"bytes\"}],\"name\":\"InvalidOutput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStartWindow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32[2]\",\"name\":\"threshold\",\"type\":\"uint32[2]\"}],\"name\":\"InvalidThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeafAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeafCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeafGreaterThanSnarkScalarField\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleAlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PaymentRequired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"PlaintextOutputAlreadyPublished\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ciphernodeRegistry\",\"type\":\"address\"}],\"name\":\"CiphernodeRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ciphertextOutput\",\"type\":\"bytes\"}],\"name\":\"CiphertextOutputPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"committeePublicKey\",\"type\":\"bytes\"}],\"name\":\"E3Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IE3Program\",\"name\":\"e3Program\",\"type\":\"address\"}],\"name\":\"E3ProgramDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IE3Program\",\"name\":\"e3Program\",\"type\":\"address\"}],\"name\":\"E3ProgramEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint32[2]\",\"name\":\"threshold\",\"type\":\"uint32[2]\"},{\"internalType\":\"uint256\",\"name\":\"requestBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"startWindow\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptionSchemeId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IE3Program\",\"name\":\"e3Program\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"e3ProgramParams\",\"type\":\"bytes\"},{\"internalType\":\"contract IInputValidator\",\"name\":\"inputValidator\",\"type\":\"address\"},{\"internalType\":\"contract IDecryptionVerifier\",\"name\":\"decryptionVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"committeePublicKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ciphertextOutput\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"plaintextOutput\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct E3\",\"name\":\"e3\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IE3Program\",\"name\":\"e3Program\",\"type\":\"address\"}],\"name\":\"E3Requested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"encryptionSchemeId\",\"type\":\"bytes32\"}],\"name\":\"EncryptionSchemeDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"encryptionSchemeId\",\"type\":\"bytes32\"}],\"name\":\"EncryptionSchemeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InputPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDuration\",\"type\":\"uint256\"}],\"name\":\"MaxDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"plaintextOutput\",\"type\":\"bytes\"}],\"name\":\"PlaintextOutputPublished\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"activate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ciphernodeRegistry\",\"outputs\":[{\"internalType\":\"contract ICiphernodeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptionSchemeId\",\"type\":\"bytes32\"}],\"name\":\"decryptionVerifiers\",\"outputs\":[{\"internalType\":\"contract IDecryptionVerifier\",\"name\":\"decryptionVerifier\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IE3Program\",\"name\":\"e3Program\",\"type\":\"address\"}],\"name\":\"disableE3Program\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptionSchemeId\",\"type\":\"bytes32\"}],\"name\":\"disableEncryptionScheme\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IE3Program\",\"name\":\"e3Program\",\"type\":\"address\"}],\"name\":\"e3Programs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"e3s\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptionSchemeId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IE3Program\",\"name\":\"e3Program\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"e3ProgramParams\",\"type\":\"bytes\"},{\"internalType\":\"contract IInputValidator\",\"name\":\"inputValidator\",\"type\":\"address\"},{\"internalType\":\"contract IDecryptionVerifier\",\"name\":\"decryptionVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"committeePublicKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ciphertextOutput\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"plaintextOutput\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IE3Program\",\"name\":\"e3Program\",\"type\":\"address\"}],\"name\":\"enableE3Program\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptionSchemeId\",\"type\":\"bytes32\"}],\"name\":\"getDecryptionVerifier\",\"outputs\":[{\"internalType\":\"contract IDecryptionVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"getE3\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint32[2]\",\"name\":\"threshold\",\"type\":\"uint32[2]\"},{\"internalType\":\"uint256\",\"name\":\"requestBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"startWindow\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptionSchemeId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IE3Program\",\"name\":\"e3Program\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"e3ProgramParams\",\"type\":\"bytes\"},{\"internalType\":\"contract IInputValidator\",\"name\":\"inputValidator\",\"type\":\"address\"},{\"internalType\":\"contract IDecryptionVerifier\",\"name\":\"decryptionVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"committeePublicKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ciphertextOutput\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"plaintextOutput\",\"type\":\"bytes\"}],\"internalType\":\"struct E3\",\"name\":\"e3\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"getInputRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract ICiphernodeRegistry\",\"name\":\"_ciphernodeRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxDuration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"inputCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"}],\"name\":\"inputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nexte3Id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ciphertextOutput\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"publishCiphertextOutput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"publishInput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"plaintextOutput\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"publishPlaintextOutput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"},{\"internalType\":\"uint32[2]\",\"name\":\"threshold\",\"type\":\"uint32[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"startWindow\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"contract IE3Program\",\"name\":\"e3Program\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"e3ProgramParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"computeProviderParams\",\"type\":\"bytes\"}],\"name\":\"request\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"e3Id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint32[2]\",\"name\":\"threshold\",\"type\":\"uint32[2]\"},{\"internalType\":\"uint256\",\"name\":\"requestBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"startWindow\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptionSchemeId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IE3Program\",\"name\":\"e3Program\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"e3ProgramParams\",\"type\":\"bytes\"},{\"internalType\":\"contract IInputValidator\",\"name\":\"inputValidator\",\"type\":\"address\"},{\"internalType\":\"contract IDecryptionVerifier\",\"name\":\"decryptionVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"committeePublicKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ciphertextOutput\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"plaintextOutput\",\"type\":\"bytes\"}],\"internalType\":\"struct E3\",\"name\":\"e3\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICiphernodeRegistry\",\"name\":\"_ciphernodeRegistry\",\"type\":\"address\"}],\"name\":\"setCiphernodeRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptionSchemeId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IDecryptionVerifier\",\"name\":\"decryptionVerifier\",\"type\":\"address\"}],\"name\":\"setDecryptionVerifier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxDuration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"CiphernodeRegistrySet(address)\":{\"params\":{\"ciphernodeRegistry\":\"The address of the CiphernodeRegistry contract.\"}},\"CiphertextOutputPublished(uint256,bytes)\":{\"params\":{\"ciphertextOutput\":\"ABI encoded ciphertext output.\",\"e3Id\":\"ID of the E3.\"}},\"E3Activated(uint256,uint256,bytes)\":{\"params\":{\"committeePublicKey\":\"Public key of the committee.\",\"e3Id\":\"ID of the E3.\",\"expiration\":\"Timestamp when committee duties expire.\"}},\"E3ProgramDisabled(address)\":{\"params\":{\"e3Program\":\"The address of the E3 Program.\"}},\"E3ProgramEnabled(address)\":{\"params\":{\"e3Program\":\"The address of the E3 Program.\"}},\"E3Requested(uint256,(uint256,uint32[2],uint256,uint256[2],uint256,uint256,bytes32,address,bytes,address,address,bytes32,bytes32,bytes),address,address)\":{\"params\":{\"e3\":\"Details of the E3.\",\"e3Id\":\"ID of the E3.\",\"e3Program\":\"Address of the Computation module selected.\",\"filter\":\"Address of the pool of nodes from which the Cipher Node committee was selected.\"}},\"EncryptionSchemeDisabled(bytes32)\":{\"params\":{\"encryptionSchemeId\":\"The ID of the encryption scheme that was disabled.\"}},\"EncryptionSchemeEnabled(bytes32)\":{\"params\":{\"encryptionSchemeId\":\"The ID of the encryption scheme that was enabled.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"InputPublished(uint256,bytes,uint256,uint256)\":{\"params\":{\"data\":\"ABI encoded input data.\",\"e3Id\":\"ID of the E3.\"}},\"MaxDurationSet(uint256)\":{\"params\":{\"maxDuration\":\"The maximum duration of a computation in seconds.\"}},\"PlaintextOutputPublished(uint256,bytes)\":{\"params\":{\"e3Id\":\"ID of the E3.\",\"plaintextOutput\":\"ABI encoded plaintext output.\"}}},\"kind\":\"dev\",\"methods\":{\"activate(uint256,bytes)\":{\"details\":\"This function MUST emit the E3Activated event.This function MUST revert if the given E3 has not yet been requested.This function MUST revert if the selected node committee has not yet published a public key.\",\"params\":{\"e3Id\":\"ID of the E3.\",\"publicKey\":\"Public key of the committee.\"},\"returns\":{\"success\":\"True if the E3 was successfully activated.\"}},\"constructor\":{\"params\":{\"_maxDuration\":\"The maximum duration of a computation in seconds\",\"_owner\":\"The owner of this contract\"}},\"getE3(uint256)\":{\"details\":\"This function MUST revert if the E3 does not exist.\",\"params\":{\"e3Id\":\"ID of the E3.\"},\"returns\":{\"e3\":\"The struct representing the requested E3.\"}},\"getInputRoot(uint256)\":{\"details\":\"This function MUST revert if the E3 does not exist.\",\"params\":{\"e3Id\":\"ID of the E3.\"},\"returns\":{\"_0\":\"The root of the input merkle tree.\"}},\"initialize(address,address,uint256)\":{\"params\":{\"_maxDuration\":\"The maximum duration of a computation in seconds\",\"_owner\":\"The owner of this contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"publishCiphertextOutput(uint256,bytes,bytes)\":{\"details\":\"This function MUST emit the CiphertextOutputPublished event.\",\"params\":{\"ciphertextOutput\":\"ABI encoded output data to verify.\",\"e3Id\":\"ID of the E3.\",\"proof\":\"ABI encoded data to verify the ciphertextOutput.\"},\"returns\":{\"success\":\"True if the output was successfully published.\"}},\"publishInput(uint256,bytes)\":{\"details\":\"This function MUST revert if the E3 is not yet activated.This function MUST emit the InputPublished event.\",\"params\":{\"data\":\"ABI encoded input data to publish.\",\"e3Id\":\"ID of the E3.\"},\"returns\":{\"success\":\"True if the input was successfully published.\"}},\"publishPlaintextOutput(uint256,bytes,bytes)\":{\"details\":\"This function MUST revert if the output has not been published.This function MUST emit the PlaintextOutputPublished event.\",\"params\":{\"e3Id\":\"ID of the E3.\",\"plaintextOutput\":\"ABI encoded plaintext output.\",\"proof\":\"ABI encoded data to verify the plaintextOutput.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"request(address,uint32[2],uint256[2],uint256,address,bytes,bytes)\":{\"details\":\"This function MUST emit the E3Requested event.\",\"params\":{\"computeProviderParams\":\"ABI encoded compute provider parameters.\",\"duration\":\"The duration of the computation in seconds.\",\"e3Program\":\"Address of the E3 Program.\",\"e3ProgramParams\":\"ABI encoded computation parameters.\",\"filter\":\"IDs of the pool of nodes from which to select the committee.\",\"threshold\":\"The M/N threshold for the committee.\"},\"returns\":{\"e3\":\"The E3 struct.\",\"e3Id\":\"ID of the E3.\"}},\"setMaxDuration(uint256)\":{\"params\":{\"_maxDuration\":\"The maximum duration of a computation in seconds.\"},\"returns\":{\"success\":\"True if the max duration was successfully set.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"CiphernodeRegistrySet(address)\":{\"notice\":\"This event MUST be emitted any time the CiphernodeRegistry is set.\"},\"CiphertextOutputPublished(uint256,bytes)\":{\"notice\":\"This event MUST be emitted when the ciphertext output of an Encrypted Execution Environment (E3) is successfully published.\"},\"E3Activated(uint256,uint256,bytes)\":{\"notice\":\"This event MUST be emitted when an Encrypted Execution Environment (E3) is successfully activated.\"},\"E3ProgramDisabled(address)\":{\"notice\":\"This event MUST be emitted any time a E3 Program is disabled.\"},\"E3ProgramEnabled(address)\":{\"notice\":\"This event MUST be emitted any time a E3 Program is enabled.\"},\"E3Requested(uint256,(uint256,uint32[2],uint256,uint256[2],uint256,uint256,bytes32,address,bytes,address,address,bytes32,bytes32,bytes),address,address)\":{\"notice\":\"This event MUST be emitted when an Encrypted Execution Environment (E3) is successfully requested.\"},\"EncryptionSchemeDisabled(bytes32)\":{\"notice\":\"This event MUST be emitted any time an encryption scheme is disabled.\"},\"EncryptionSchemeEnabled(bytes32)\":{\"notice\":\"The event MUST be emitted any time an encryption scheme is enabled.\"},\"InputPublished(uint256,bytes,uint256,uint256)\":{\"notice\":\"This event MUST be emitted when an input to an Encrypted Execution Environment (E3) is successfully published.\"},\"MaxDurationSet(uint256)\":{\"notice\":\"This event MUST be emitted any time the `maxDuration` is set.\"},\"PlaintextOutputPublished(uint256,bytes)\":{\"notice\":\"This event MUST be emitted when the plaintext output of an Encrypted Execution Environment (E3) is successfully published.\"}},\"kind\":\"user\",\"methods\":{\"activate(uint256,bytes)\":{\"notice\":\"This function should be called to activate an Encrypted Execution Environment (E3) once it has been initialized and is ready for input.\"},\"getE3(uint256)\":{\"notice\":\"This function should be called to retrieve the details of an Encrypted Execution Environment (E3).\"},\"getInputRoot(uint256)\":{\"notice\":\"This function returns root of the input merkle tree for a given E3.\"},\"publishCiphertextOutput(uint256,bytes,bytes)\":{\"notice\":\"This function should be called to publish output data for an Encrypted Execution Environment (E3).\"},\"publishInput(uint256,bytes)\":{\"notice\":\"This function should be called to publish input data for Encrypted Execution Environment (E3).\"},\"publishPlaintextOutput(uint256,bytes,bytes)\":{\"notice\":\"This function publishes the plaintext output of an Encrypted Execution Environment (E3).\"},\"request(address,uint32[2],uint256[2],uint256,address,bytes,bytes)\":{\"notice\":\"This function should be called to request a computation within an Encrypted Execution Environment (E3).\"},\"setMaxDuration(uint256)\":{\"notice\":\"This function should be called to set the maximum duration of requested computations.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Enclave.sol\":\"Enclave\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@zk-kit/lean-imt.sol/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nuint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\",\"keccak256\":\"0xb1944a1d9f63069b2f22260935adb2d11546f82fbb7d12d853a90134a92f4b5b\",\"license\":\"UNLICENSED\"},\"@zk-kit/lean-imt.sol/InternalLeanIMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {PoseidonT3} from \\\"poseidon-solidity/PoseidonT3.sol\\\";\\nimport {SNARK_SCALAR_FIELD} from \\\"./Constants.sol\\\";\\n\\nstruct LeanIMTData {\\n    // Tracks the current number of leaves in the tree.\\n    uint256 size;\\n    // Represents the current depth of the tree, which can increase as new leaves are inserted.\\n    uint256 depth;\\n    // A mapping from each level of the tree to the node value of the last even position at that level.\\n    // Used for efficient inserts, updates and root calculations.\\n    mapping(uint256 => uint256) sideNodes;\\n    // A mapping from leaf values to their respective indices in the tree.\\n    // This facilitates checks for leaf existence and retrieval of leaf positions.\\n    mapping(uint256 => uint256) leaves;\\n}\\n\\nerror WrongSiblingNodes();\\nerror LeafGreaterThanSnarkScalarField();\\nerror LeafCannotBeZero();\\nerror LeafAlreadyExists();\\nerror LeafDoesNotExist();\\n\\n/// @title Lean Incremental binary Merkle tree.\\n/// @dev The LeanIMT is an optimized version of the BinaryIMT.\\n/// This implementation eliminates the use of zeroes, and make the tree depth dynamic.\\n/// When a node doesn't have the right child, instead of using a zero hash as in the BinaryIMT,\\n/// the node's value becomes that of its left child. Furthermore, rather than utilizing a static tree depth,\\n/// it is updated based on the number of leaves in the tree. This approach\\n/// results in the calculation of significantly fewer hashes, making the tree more efficient.\\nlibrary InternalLeanIMT {\\n    /// @dev Inserts a new leaf into the incremental merkle tree.\\n    /// The function ensures that the leaf is valid according to the\\n    /// constraints of the tree and then updates the tree's structure accordingly.\\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\\n    /// @param leaf: The value of the new leaf to be inserted into the tree.\\n    /// @return The new hash of the node after the leaf has been inserted.\\n    function _insert(LeanIMTData storage self, uint256 leaf) internal returns (uint256) {\\n        if (leaf >= SNARK_SCALAR_FIELD) {\\n            revert LeafGreaterThanSnarkScalarField();\\n        } else if (leaf == 0) {\\n            revert LeafCannotBeZero();\\n        } else if (_has(self, leaf)) {\\n            revert LeafAlreadyExists();\\n        }\\n\\n        uint256 index = self.size;\\n\\n        // Cache tree depth to optimize gas\\n        uint256 treeDepth = self.depth;\\n\\n        // A new insertion can increase a tree's depth by at most 1,\\n        // and only if the number of leaves supported by the current\\n        // depth is less than the number of leaves to be supported after insertion.\\n        if (2 ** treeDepth < index + 1) {\\n            ++treeDepth;\\n        }\\n\\n        self.depth = treeDepth;\\n\\n        uint256 node = leaf;\\n\\n        for (uint256 level = 0; level < treeDepth; ) {\\n            if ((index >> level) & 1 == 1) {\\n                node = PoseidonT3.hash([self.sideNodes[level], node]);\\n            } else {\\n                self.sideNodes[level] = node;\\n            }\\n\\n            unchecked {\\n                ++level;\\n            }\\n        }\\n\\n        self.size = ++index;\\n\\n        self.sideNodes[treeDepth] = node;\\n        self.leaves[leaf] = index;\\n\\n        return node;\\n    }\\n\\n    /// @dev Inserts many leaves into the incremental merkle tree.\\n    /// The function ensures that the leaves are valid according to the\\n    /// constraints of the tree and then updates the tree's structure accordingly.\\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\\n    /// @param leaves: The values of the new leaves to be inserted into the tree.\\n    /// @return The root after the leaves have been inserted.\\n    function _insertMany(LeanIMTData storage self, uint256[] calldata leaves) internal returns (uint256) {\\n        // Cache tree size to optimize gas\\n        uint256 treeSize = self.size;\\n\\n        // Check that all the new values are correct to be added.\\n        for (uint256 i = 0; i < leaves.length; ) {\\n            if (leaves[i] >= SNARK_SCALAR_FIELD) {\\n                revert LeafGreaterThanSnarkScalarField();\\n            } else if (leaves[i] == 0) {\\n                revert LeafCannotBeZero();\\n            } else if (_has(self, leaves[i])) {\\n                revert LeafAlreadyExists();\\n            }\\n\\n            self.leaves[leaves[i]] = treeSize + 1 + i;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Array to save the nodes that will be used to create the next level of the tree.\\n        uint256[] memory currentLevelNewNodes;\\n\\n        currentLevelNewNodes = leaves;\\n\\n        // Cache tree depth to optimize gas\\n        uint256 treeDepth = self.depth;\\n\\n        // Calculate the depth of the tree after adding the new values.\\n        // Unlike the 'insert' function, we need a while here as\\n        // N insertions can increase the tree's depth more than once.\\n        while (2 ** treeDepth < treeSize + leaves.length) {\\n            ++treeDepth;\\n        }\\n\\n        self.depth = treeDepth;\\n\\n        // First index to change in every level.\\n        uint256 currentLevelStartIndex = treeSize;\\n\\n        // Size of the level used to create the next level.\\n        uint256 currentLevelSize = treeSize + leaves.length;\\n\\n        // The index where changes begin at the next level.\\n        uint256 nextLevelStartIndex = currentLevelStartIndex >> 1;\\n\\n        // The size of the next level.\\n        uint256 nextLevelSize = ((currentLevelSize - 1) >> 1) + 1;\\n\\n        for (uint256 level = 0; level < treeDepth; ) {\\n            // The number of nodes for the new level that will be created,\\n            // only the new values, not the entire level.\\n            uint256 numberOfNewNodes = nextLevelSize - nextLevelStartIndex;\\n            uint256[] memory nextLevelNewNodes = new uint256[](numberOfNewNodes);\\n            for (uint256 i = 0; i < numberOfNewNodes; ) {\\n                uint256 leftNode;\\n\\n                // Assign the left node using the saved path or the position in the array.\\n                if ((i + nextLevelStartIndex) * 2 < currentLevelStartIndex) {\\n                    leftNode = self.sideNodes[level];\\n                } else {\\n                    leftNode = currentLevelNewNodes[(i + nextLevelStartIndex) * 2 - currentLevelStartIndex];\\n                }\\n\\n                uint256 rightNode;\\n\\n                // Assign the right node if the value exists.\\n                if ((i + nextLevelStartIndex) * 2 + 1 < currentLevelSize) {\\n                    rightNode = currentLevelNewNodes[(i + nextLevelStartIndex) * 2 + 1 - currentLevelStartIndex];\\n                }\\n\\n                uint256 parentNode;\\n\\n                // Assign the parent node.\\n                // If it has a right child the result will be the hash(leftNode, rightNode) if not,\\n                // it will be the leftNode.\\n                if (rightNode != 0) {\\n                    parentNode = PoseidonT3.hash([leftNode, rightNode]);\\n                } else {\\n                    parentNode = leftNode;\\n                }\\n\\n                nextLevelNewNodes[i] = parentNode;\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            // Update the `sideNodes` variable.\\n            // If `currentLevelSize` is odd, the saved value will be the last value of the array\\n            // if it is even and there are more than 1 element in `currentLevelNewNodes`, the saved value\\n            // will be the value before the last one.\\n            // If it is even and there is only one element, there is no need to save anything because\\n            // the correct value for this level was already saved before.\\n            if (currentLevelSize & 1 == 1) {\\n                self.sideNodes[level] = currentLevelNewNodes[currentLevelNewNodes.length - 1];\\n            } else if (currentLevelNewNodes.length > 1) {\\n                self.sideNodes[level] = currentLevelNewNodes[currentLevelNewNodes.length - 2];\\n            }\\n\\n            currentLevelStartIndex = nextLevelStartIndex;\\n\\n            // Calculate the next level startIndex value.\\n            // It is the position of the parent node which is pos/2.\\n            nextLevelStartIndex >>= 1;\\n\\n            // Update the next array that will be used to calculate the next level.\\n            currentLevelNewNodes = nextLevelNewNodes;\\n\\n            currentLevelSize = nextLevelSize;\\n\\n            // Calculate the size of the next level.\\n            // The size of the next level is (currentLevelSize - 1) / 2 + 1.\\n            nextLevelSize = ((nextLevelSize - 1) >> 1) + 1;\\n\\n            unchecked {\\n                ++level;\\n            }\\n        }\\n\\n        // Update tree size\\n        self.size = treeSize + leaves.length;\\n\\n        // Update tree root\\n        self.sideNodes[treeDepth] = currentLevelNewNodes[0];\\n\\n        return currentLevelNewNodes[0];\\n    }\\n\\n    /// @dev Updates the value of an existing leaf and recalculates hashes\\n    /// to maintain tree integrity.\\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\\n    /// @param oldLeaf: The value of the leaf that is to be updated.\\n    /// @param newLeaf: The new value that will replace the oldLeaf in the tree.\\n    /// @param siblingNodes: An array of sibling nodes that are necessary to recalculate the path to the root.\\n    /// @return The new hash of the updated node after the leaf has been updated.\\n    function _update(\\n        LeanIMTData storage self,\\n        uint256 oldLeaf,\\n        uint256 newLeaf,\\n        uint256[] calldata siblingNodes\\n    ) internal returns (uint256) {\\n        if (newLeaf >= SNARK_SCALAR_FIELD) {\\n            revert LeafGreaterThanSnarkScalarField();\\n        } else if (!_has(self, oldLeaf)) {\\n            revert LeafDoesNotExist();\\n        } else if (_has(self, newLeaf)) {\\n            revert LeafAlreadyExists();\\n        }\\n\\n        uint256 index = _indexOf(self, oldLeaf);\\n        uint256 node = newLeaf;\\n        uint256 oldRoot = oldLeaf;\\n\\n        uint256 lastIndex = self.size - 1;\\n        uint256 i = 0;\\n\\n        // Cache tree depth to optimize gas\\n        uint256 treeDepth = self.depth;\\n\\n        for (uint256 level = 0; level < treeDepth; ) {\\n            if ((index >> level) & 1 == 1) {\\n                if (siblingNodes[i] >= SNARK_SCALAR_FIELD) {\\n                    revert LeafGreaterThanSnarkScalarField();\\n                }\\n\\n                node = PoseidonT3.hash([siblingNodes[i], node]);\\n                oldRoot = PoseidonT3.hash([siblingNodes[i], oldRoot]);\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            } else {\\n                if (index >> level != lastIndex >> level) {\\n                    if (siblingNodes[i] >= SNARK_SCALAR_FIELD) {\\n                        revert LeafGreaterThanSnarkScalarField();\\n                    }\\n\\n                    node = PoseidonT3.hash([node, siblingNodes[i]]);\\n                    oldRoot = PoseidonT3.hash([oldRoot, siblingNodes[i]]);\\n\\n                    unchecked {\\n                        ++i;\\n                    }\\n                } else {\\n                    self.sideNodes[i] = node;\\n                }\\n            }\\n\\n            unchecked {\\n                ++level;\\n            }\\n        }\\n\\n        if (oldRoot != _root(self)) {\\n            revert WrongSiblingNodes();\\n        }\\n\\n        self.sideNodes[treeDepth] = node;\\n\\n        if (newLeaf != 0) {\\n            self.leaves[newLeaf] = self.leaves[oldLeaf];\\n        }\\n\\n        self.leaves[oldLeaf] = 0;\\n\\n        return node;\\n    }\\n\\n    /// @dev Removes a leaf from the tree by setting its value to zero.\\n    /// This function utilizes the update function to set the leaf's value\\n    /// to zero and update the tree's state accordingly.\\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\\n    /// @param oldLeaf: The value of the leaf to be removed.\\n    /// @param siblingNodes: An array of sibling nodes required for updating the path to the root after removal.\\n    /// @return The new root hash of the tree after the leaf has been removed.\\n    function _remove(\\n        LeanIMTData storage self,\\n        uint256 oldLeaf,\\n        uint256[] calldata siblingNodes\\n    ) internal returns (uint256) {\\n        return _update(self, oldLeaf, 0, siblingNodes);\\n    }\\n\\n    /// @dev Checks if a leaf exists in the tree.\\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\\n    /// @param leaf: The value of the leaf to check for existence.\\n    /// @return A boolean value indicating whether the leaf exists in the tree.\\n    function _has(LeanIMTData storage self, uint256 leaf) internal view returns (bool) {\\n        return self.leaves[leaf] != 0;\\n    }\\n\\n    /// @dev Retrieves the index of a given leaf in the tree.\\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\\n    /// @param leaf: The value of the leaf whose index is to be found.\\n    /// @return The index of the specified leaf within the tree. If the leaf is not present, the function\\n    /// reverts with a custom error.\\n    function _indexOf(LeanIMTData storage self, uint256 leaf) internal view returns (uint256) {\\n        if (self.leaves[leaf] == 0) {\\n            revert LeafDoesNotExist();\\n        }\\n\\n        return self.leaves[leaf] - 1;\\n    }\\n\\n    /// @dev Retrieves the root of the tree from the 'sideNodes' mapping using the\\n    /// current tree depth.\\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\\n    /// @return The root hash of the tree.\\n    function _root(LeanIMTData storage self) internal view returns (uint256) {\\n        return self.sideNodes[self.depth];\\n    }\\n}\\n\",\"keccak256\":\"0x6385ce9153d11d9824163464193d4ba3dd304e662dccd365ba2fc381a359762b\",\"license\":\"MIT\"},\"contracts/Enclave.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.27;\\n\\nimport { IEnclave, E3, IE3Program } from \\\"./interfaces/IEnclave.sol\\\";\\nimport { IInputValidator } from \\\"./interfaces/IInputValidator.sol\\\";\\nimport { ICiphernodeRegistry } from \\\"./interfaces/ICiphernodeRegistry.sol\\\";\\nimport { IDecryptionVerifier } from \\\"./interfaces/IDecryptionVerifier.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    InternalLeanIMT,\\n    LeanIMTData,\\n    PoseidonT3\\n} from \\\"@zk-kit/lean-imt.sol/InternalLeanIMT.sol\\\";\\n\\ncontract Enclave is IEnclave, OwnableUpgradeable {\\n    using InternalLeanIMT for LeanIMTData;\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                 Storage Variables                      //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    ICiphernodeRegistry public ciphernodeRegistry; // address of the Ciphernode registry.\\n    uint256 public maxDuration; // maximum duration of a computation in seconds.\\n    uint256 public nexte3Id; // ID of the next E3.\\n    uint256 public requests; // total number of requests made to Enclave.\\n\\n    // Mapping of allowed E3 Programs.\\n    mapping(IE3Program e3Program => bool allowed) public e3Programs;\\n\\n    // Mapping of E3s.\\n    mapping(uint256 e3Id => E3 e3) public e3s;\\n\\n    // Mapping of input merkle trees.\\n    mapping(uint256 e3Id => LeanIMTData imt) public inputs;\\n\\n    // Mapping counting the number of inputs for each E3.\\n    mapping(uint256 e3Id => uint256 inputCount) public inputCounts;\\n\\n    // Mapping of enabled encryption schemes.\\n    mapping(bytes32 encryptionSchemeId => IDecryptionVerifier decryptionVerifier)\\n        public decryptionVerifiers;\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                        Errors                          //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    error CommitteeSelectionFailed();\\n    error E3ProgramNotAllowed(IE3Program e3Program);\\n    error E3AlreadyActivated(uint256 e3Id);\\n    error E3Expired();\\n    error E3NotActivated(uint256 e3Id);\\n    error E3NotReady();\\n    error E3DoesNotExist(uint256 e3Id);\\n    error ModuleAlreadyEnabled(address module);\\n    error ModuleNotEnabled(address module);\\n    error InvalidEncryptionScheme(bytes32 encryptionSchemeId);\\n    error InputDeadlinePassed(uint256 e3Id, uint256 expiration);\\n    error InputDeadlineNotPassed(uint256 e3Id, uint256 expiration);\\n    error InvalidComputationRequest(IInputValidator inputValidator);\\n    error InvalidCiphernodeRegistry(ICiphernodeRegistry ciphernodeRegistry);\\n    error InvalidDuration(uint256 duration);\\n    error InvalidOutput(bytes output);\\n    error InvalidInput();\\n    error InvalidStartWindow();\\n    error InvalidThreshold(uint32[2] threshold);\\n    error CiphertextOutputAlreadyPublished(uint256 e3Id);\\n    error CiphertextOutputNotPublished(uint256 e3Id);\\n    error PaymentRequired(uint256 value);\\n    error PlaintextOutputAlreadyPublished(uint256 e3Id);\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                   Initialization                       //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    /// @param _owner The owner of this contract\\n    /// @param _maxDuration The maximum duration of a computation in seconds\\n    constructor(\\n        address _owner,\\n        ICiphernodeRegistry _ciphernodeRegistry,\\n        uint256 _maxDuration\\n    ) {\\n        initialize(_owner, _ciphernodeRegistry, _maxDuration);\\n    }\\n\\n    /// @param _owner The owner of this contract\\n    /// @param _maxDuration The maximum duration of a computation in seconds\\n    function initialize(\\n        address _owner,\\n        ICiphernodeRegistry _ciphernodeRegistry,\\n        uint256 _maxDuration\\n    ) public initializer {\\n        __Ownable_init(msg.sender);\\n        setMaxDuration(_maxDuration);\\n        setCiphernodeRegistry(_ciphernodeRegistry);\\n        if (_owner != owner()) transferOwnership(_owner);\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                  Core Entrypoints                      //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    function request(\\n        address filter,\\n        uint32[2] calldata threshold,\\n        uint256[2] calldata startWindow,\\n        uint256 duration,\\n        IE3Program e3Program,\\n        bytes memory e3ProgramParams,\\n        bytes memory computeProviderParams\\n    ) external payable returns (uint256 e3Id, E3 memory e3) {\\n        // TODO: allow for other payment methods or only native tokens?\\n        // TODO: should payment checks be somewhere else? Perhaps in the E3 Program or ciphernode registry?\\n        require(msg.value > 0, PaymentRequired(msg.value));\\n        require(\\n            threshold[1] >= threshold[0] && threshold[0] > 0,\\n            InvalidThreshold(threshold)\\n        );\\n        require(\\n            // TODO: do we need a minimum start window to allow time for committee selection?\\n            startWindow[1] >= startWindow[0] &&\\n                startWindow[1] >= block.timestamp,\\n            InvalidStartWindow()\\n        );\\n        require(\\n            duration > 0 && duration <= maxDuration,\\n            InvalidDuration(duration)\\n        );\\n        require(e3Programs[e3Program], E3ProgramNotAllowed(e3Program));\\n\\n        // TODO: should IDs be incremental or produced deterministically?\\n        e3Id = nexte3Id;\\n        nexte3Id++;\\n        uint256 seed = uint256(keccak256(abi.encode(block.prevrandao, e3Id)));\\n\\n        (bytes32 encryptionSchemeId, IInputValidator inputValidator) = e3Program\\n            .validate(e3Id, seed, e3ProgramParams, computeProviderParams);\\n        IDecryptionVerifier decryptionVerifier = decryptionVerifiers[\\n            encryptionSchemeId\\n        ];\\n        require(\\n            decryptionVerifiers[encryptionSchemeId] !=\\n                IDecryptionVerifier(address(0)),\\n            InvalidEncryptionScheme(encryptionSchemeId)\\n        );\\n        require(\\n            address(inputValidator) != address(0),\\n            InvalidComputationRequest(inputValidator)\\n        );\\n\\n        e3 = E3({\\n            seed: seed,\\n            threshold: threshold,\\n            requestBlock: block.number,\\n            startWindow: startWindow,\\n            duration: duration,\\n            expiration: 0,\\n            encryptionSchemeId: encryptionSchemeId,\\n            e3Program: e3Program,\\n            e3ProgramParams: e3ProgramParams,\\n            inputValidator: inputValidator,\\n            decryptionVerifier: decryptionVerifier,\\n            committeePublicKey: hex\\\"\\\",\\n            ciphertextOutput: hex\\\"\\\",\\n            plaintextOutput: hex\\\"\\\"\\n        });\\n        e3s[e3Id] = e3;\\n\\n        require(\\n            ciphernodeRegistry.requestCommittee(e3Id, filter, threshold),\\n            CommitteeSelectionFailed()\\n        );\\n\\n        emit E3Requested(e3Id, e3, filter, e3Program);\\n    }\\n\\n    function activate(\\n        uint256 e3Id,\\n        bytes memory publicKey\\n    ) external returns (bool success) {\\n        E3 memory e3 = getE3(e3Id);\\n\\n        require(e3.expiration == 0, E3AlreadyActivated(e3Id));\\n        require(e3.startWindow[0] <= block.timestamp, E3NotReady());\\n        // TODO: handle what happens to the payment if the start window has passed.\\n        require(e3.startWindow[1] >= block.timestamp, E3Expired());\\n\\n        bytes32 publicKeyHash = ciphernodeRegistry.committeePublicKey(e3Id);\\n        require(\\n            keccak256(publicKey) == publicKeyHash,\\n            CommitteeSelectionFailed()\\n        );\\n\\n        e3s[e3Id].expiration = block.timestamp + e3.duration;\\n        e3s[e3Id].committeePublicKey = keccak256(publicKey);\\n\\n        emit E3Activated(e3Id, e3.expiration, publicKey);\\n\\n        return true;\\n    }\\n\\n    function publishInput(\\n        uint256 e3Id,\\n        bytes memory data\\n    ) external returns (bool success) {\\n        E3 memory e3 = getE3(e3Id);\\n\\n        // Note: if we make 0 a no expiration, this has to be refactored\\n        require(e3.expiration > 0, E3NotActivated(e3Id));\\n        // TODO: should we have an input window, including both a start and end timestamp?\\n        require(\\n            e3.expiration > block.timestamp,\\n            InputDeadlinePassed(e3Id, e3.expiration)\\n        );\\n\\n        bytes memory input = e3.inputValidator.validate(msg.sender, data);\\n        uint256 inputHash = PoseidonT3.hash(\\n            [uint256(keccak256(input)), inputCounts[e3Id]]\\n        );\\n\\n        inputCounts[e3Id]++;\\n        inputs[e3Id]._insert(inputHash);\\n        success = true;\\n\\n        emit InputPublished(e3Id, input, inputHash, inputCounts[e3Id] - 1);\\n    }\\n\\n    function publishCiphertextOutput(\\n        uint256 e3Id,\\n        bytes memory ciphertextOutput,\\n        bytes memory proof\\n    ) external returns (bool success) {\\n        E3 memory e3 = getE3(e3Id);\\n        // Note: if we make 0 a no expiration, this has to be refactored\\n        require(e3.expiration > 0, E3NotActivated(e3Id));\\n        require(\\n            e3.expiration <= block.timestamp,\\n            InputDeadlineNotPassed(e3Id, e3.expiration)\\n        );\\n        // TODO: should the output verifier be able to change its mind?\\n        //i.e. should we be able to call this multiple times?\\n        require(\\n            e3.ciphertextOutput == bytes32(0),\\n            CiphertextOutputAlreadyPublished(e3Id)\\n        );\\n        bytes32 ciphertextOutputHash = keccak256(ciphertextOutput);\\n        (success) = e3.e3Program.verify(e3Id, ciphertextOutputHash, proof);\\n        require(success, InvalidOutput(ciphertextOutput));\\n        e3s[e3Id].ciphertextOutput = ciphertextOutputHash;\\n\\n        emit CiphertextOutputPublished(e3Id, ciphertextOutput);\\n    }\\n\\n    function publishPlaintextOutput(\\n        uint256 e3Id,\\n        bytes memory plaintextOutput,\\n        bytes memory proof\\n    ) external returns (bool success) {\\n        E3 memory e3 = getE3(e3Id);\\n        // Note: if we make 0 a no expiration, this has to be refactored\\n        require(e3.expiration > 0, E3NotActivated(e3Id));\\n        require(\\n            e3.ciphertextOutput != bytes32(0),\\n            CiphertextOutputNotPublished(e3Id)\\n        );\\n        require(\\n            e3.plaintextOutput.length == 0,\\n            PlaintextOutputAlreadyPublished(e3Id)\\n        );\\n        (success) = e3.decryptionVerifier.verify(\\n            e3Id,\\n            keccak256(plaintextOutput),\\n            proof\\n        );\\n        require(success, InvalidOutput(plaintextOutput));\\n        e3s[e3Id].plaintextOutput = plaintextOutput;\\n\\n        emit PlaintextOutputPublished(e3Id, plaintextOutput);\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                   Set Functions                        //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    function setMaxDuration(\\n        uint256 _maxDuration\\n    ) public onlyOwner returns (bool success) {\\n        maxDuration = _maxDuration;\\n        success = true;\\n        emit MaxDurationSet(_maxDuration);\\n    }\\n\\n    function setCiphernodeRegistry(\\n        ICiphernodeRegistry _ciphernodeRegistry\\n    ) public onlyOwner returns (bool success) {\\n        require(\\n            address(_ciphernodeRegistry) != address(0) &&\\n                _ciphernodeRegistry != ciphernodeRegistry,\\n            InvalidCiphernodeRegistry(_ciphernodeRegistry)\\n        );\\n        ciphernodeRegistry = _ciphernodeRegistry;\\n        success = true;\\n        emit CiphernodeRegistrySet(address(_ciphernodeRegistry));\\n    }\\n\\n    function enableE3Program(\\n        IE3Program e3Program\\n    ) public onlyOwner returns (bool success) {\\n        require(\\n            !e3Programs[e3Program],\\n            ModuleAlreadyEnabled(address(e3Program))\\n        );\\n        e3Programs[e3Program] = true;\\n        success = true;\\n        emit E3ProgramEnabled(e3Program);\\n    }\\n\\n    function disableE3Program(\\n        IE3Program e3Program\\n    ) public onlyOwner returns (bool success) {\\n        require(e3Programs[e3Program], ModuleNotEnabled(address(e3Program)));\\n        delete e3Programs[e3Program];\\n        success = true;\\n        emit E3ProgramDisabled(e3Program);\\n    }\\n\\n    function setDecryptionVerifier(\\n        bytes32 encryptionSchemeId,\\n        IDecryptionVerifier decryptionVerifier\\n    ) public onlyOwner returns (bool success) {\\n        require(\\n            decryptionVerifier != IDecryptionVerifier(address(0)) &&\\n                decryptionVerifiers[encryptionSchemeId] != decryptionVerifier,\\n            InvalidEncryptionScheme(encryptionSchemeId)\\n        );\\n        decryptionVerifiers[encryptionSchemeId] = decryptionVerifier;\\n        success = true;\\n        emit EncryptionSchemeEnabled(encryptionSchemeId);\\n    }\\n\\n    function disableEncryptionScheme(\\n        bytes32 encryptionSchemeId\\n    ) public onlyOwner returns (bool success) {\\n        require(\\n            decryptionVerifiers[encryptionSchemeId] !=\\n                IDecryptionVerifier(address(0)),\\n            InvalidEncryptionScheme(encryptionSchemeId)\\n        );\\n        decryptionVerifiers[encryptionSchemeId] = IDecryptionVerifier(\\n            address(0)\\n        );\\n        success = true;\\n        emit EncryptionSchemeDisabled(encryptionSchemeId);\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                   Get Functions                        //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    function getE3(uint256 e3Id) public view returns (E3 memory e3) {\\n        e3 = e3s[e3Id];\\n        require(e3.e3Program != IE3Program(address(0)), E3DoesNotExist(e3Id));\\n    }\\n\\n    function getInputRoot(uint256 e3Id) public view returns (uint256) {\\n        require(\\n            e3s[e3Id].e3Program != IE3Program(address(0)),\\n            E3DoesNotExist(e3Id)\\n        );\\n        return InternalLeanIMT._root(inputs[e3Id]);\\n    }\\n\\n    function getDecryptionVerifier(\\n        bytes32 encryptionSchemeId\\n    ) public view returns (IDecryptionVerifier) {\\n        return decryptionVerifiers[encryptionSchemeId];\\n    }\\n}\\n\",\"keccak256\":\"0x7e1c43df26c36b2954f7ca06376e3e6c24ad4efc6bd7144ed54c85595b49b035\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ICiphernodeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.27;\\n\\ninterface ICiphernodeRegistry {\\n    /// @notice This event MUST be emitted when a committee is selected for an E3.\\n    /// @param e3Id ID of the E3 for which the committee was selected.\\n    /// @param filter Address of the contract that will coordinate committee selection.\\n    /// @param threshold The M/N threshold for the committee.\\n    event CommitteeRequested(\\n        uint256 indexed e3Id,\\n        address filter,\\n        uint32[2] threshold\\n    );\\n\\n    /// @notice This event MUST be emitted when a committee is selected for an E3.\\n    /// @param e3Id ID of the E3 for which the committee was selected.\\n    /// @param publicKey Public key of the committee.\\n    event CommitteePublished(uint256 indexed e3Id, bytes publicKey);\\n\\n    /// @notice This event MUST be emitted when `enclave` is set.\\n    /// @param enclave Address of the enclave contract.\\n    event EnclaveSet(address indexed enclave);\\n\\n    /// @notice This event MUST be emitted when a ciphernode is added to the registry.\\n    /// @param node Address of the ciphernode.\\n    /// @param index Index of the ciphernode in the registry.\\n    /// @param numNodes Number of ciphernodes in the registry.\\n    /// @param size Size of the registry.\\n    event CiphernodeAdded(\\n        address indexed node,\\n        uint256 index,\\n        uint256 numNodes,\\n        uint256 size\\n    );\\n\\n    /// @notice This event MUST be emitted when a ciphernode is removed from the registry.\\n    /// @param node Address of the ciphernode.\\n    /// @param index Index of the ciphernode in the registry.\\n    /// @param numNodes Number of ciphernodes in the registry.\\n    /// @param size Size of the registry.\\n    event CiphernodeRemoved(\\n        address indexed node,\\n        uint256 index,\\n        uint256 numNodes,\\n        uint256 size\\n    );\\n\\n    function isCiphernodeEligible(address ciphernode) external returns (bool);\\n\\n    /// @notice Initiates the committee selection process for a specified E3.\\n    /// @dev This function MUST revert when not called by the Enclave contract.\\n    /// @param e3Id ID of the E3 for which to select the committee.\\n    /// @param filter The address of the filter responsible for the committee selection process.\\n    /// @param threshold The M/N threshold for the committee.\\n    /// @return success True if committee selection was successfully initiated.\\n    function requestCommittee(\\n        uint256 e3Id,\\n        address filter,\\n        uint32[2] calldata threshold\\n    ) external returns (bool success);\\n\\n    /// @notice Publishes the public key resulting from the committee selection process.\\n    /// @dev This function MUST revert if not called by the previously selected filter.\\n    /// @param e3Id ID of the E3 for which to select the committee.\\n    /// @param publicKey The hash of the public key generated by the given committee.\\n    function publishCommittee(\\n        uint256 e3Id,\\n        bytes calldata proof,\\n        bytes calldata publicKey\\n    ) external;\\n\\n    /// @notice This function should be called by the Enclave contract to get the public key of a committee.\\n    /// @dev This function MUST revert if no committee has been requested for the given E3.\\n    /// @dev This function MUST revert if the committee has not yet published a public key.\\n    /// @param e3Id ID of the E3 for which to get the committee public key.\\n    /// @return publicKeyHash The hash of the public key of the given committee.\\n    function committeePublicKey(\\n        uint256 e3Id\\n    ) external view returns (bytes32 publicKeyHash);\\n}\\n\",\"keccak256\":\"0xe24e6322e8c6fc83461edfbdbedb409e243f1c4e79021a74585cfe875c225aa2\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IDecryptionVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.27;\\n\\ninterface IDecryptionVerifier {\\n    /// @notice This function should be called by the Enclave contract to verify the\\n    /// decryption of output of a computation.\\n    /// @param e3Id ID of the E3.\\n    /// @param plaintextOutputHash The keccak256 hash of the plaintext output to be verified.\\n    /// @param proof ABI encoded proof of the given output hash.\\n    /// @return success Whether or not the plaintextOutputHash was successfully verified.\\n    function verify(\\n        uint256 e3Id,\\n        bytes32 plaintextOutputHash,\\n        bytes memory proof\\n    ) external view returns (bool success);\\n}\\n\",\"keccak256\":\"0xb92991a581d3c18cdc273497687ec1c6e3016674314f21fe56917aece5d10863\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IE3.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.27;\\n\\nimport { IInputValidator } from \\\"./IInputValidator.sol\\\";\\nimport { IE3Program } from \\\"./IE3Program.sol\\\";\\nimport { IDecryptionVerifier } from \\\"./IDecryptionVerifier.sol\\\";\\n\\n/// @title E3 struct\\n/// @notice This struct represents an E3 computation.\\n/// @param threshold M/N threshold for the committee.\\n/// @param requestBlock Block number when the E3 was requested.\\n/// @param startWindow Start window for the computation: index zero is minimum, index 1 is the maxium.\\n/// @param duration Duration of the E3.\\n/// @param expiration Timestamp when committee duties expire.\\n/// @param e3Program Address of the E3 Program contract.\\n/// @param computeProvider Address of the compute provider contract.\\n/// @param inputValidator Address of the input validator contract.\\n/// @param decryptionVerifier Address of the output verifier contract.\\n/// @param committeeId ID of the selected committee.\\n/// @param ciphertextOutput Encrypted output data.\\n/// @param plaintextOutput Decrypted output data.\\nstruct E3 {\\n    uint256 seed;\\n    uint32[2] threshold;\\n    uint256 requestBlock;\\n    uint256[2] startWindow;\\n    uint256 duration;\\n    uint256 expiration;\\n    bytes32 encryptionSchemeId;\\n    IE3Program e3Program;\\n    bytes e3ProgramParams;\\n    IInputValidator inputValidator;\\n    IDecryptionVerifier decryptionVerifier;\\n    bytes32 committeePublicKey;\\n    bytes32 ciphertextOutput;\\n    bytes plaintextOutput;\\n}\\n\",\"keccak256\":\"0x16f12d3e46b12fcbff721eb8c358324fd400c95b40d57ed06b05e7afd590811e\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IE3Program.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.27;\\n\\nimport { IInputValidator } from \\\"./IInputValidator.sol\\\";\\n\\ninterface IE3Program {\\n    /// @notice This function should be called by the Enclave contract to validate the computation parameters.\\n    /// @param e3Id ID of the E3.\\n    /// @param seed Seed for the computation.\\n    /// @param e3ProgramParams ABI encoded computation parameters.\\n    /// @param computeProviderParams ABI encoded compute provider parameters.\\n    /// @return encryptionSchemeId ID of the encryption scheme to be used for the computation.\\n    /// @return inputValidator The input validator to be used for the computation.\\n    function validate(\\n        uint256 e3Id,\\n        uint256 seed,\\n        bytes calldata e3ProgramParams,\\n        bytes calldata computeProviderParams\\n    )\\n        external\\n        returns (bytes32 encryptionSchemeId, IInputValidator inputValidator);\\n\\n    /// @notice This function should be called by the Enclave contract to verify the decrypted output of an E3.\\n    /// @param e3Id ID of the E3.\\n    /// @param ciphertextOutputHash The keccak256 hash of output data to be verified.\\n    /// @param proof ABI encoded data to verify the ciphertextOutputHash.\\n    /// @return success Whether the output data is valid.\\n    function verify(\\n        uint256 e3Id,\\n        bytes32 ciphertextOutputHash,\\n        bytes memory proof\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xd60e92b5b6498daf0b7f1238d354156c67d25c03caaaabbc601368e9e4a295b2\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IEnclave.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.27;\\n\\nimport { E3, IE3Program } from \\\"./IE3.sol\\\";\\n\\ninterface IEnclave {\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                         Events                         //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    /// @notice This event MUST be emitted when an Encrypted Execution Environment (E3) is successfully requested.\\n    /// @param e3Id ID of the E3.\\n    /// @param e3 Details of the E3.\\n    /// @param filter Address of the pool of nodes from which the Cipher Node committee was selected.\\n    /// @param e3Program Address of the Computation module selected.\\n    event E3Requested(\\n        uint256 e3Id,\\n        E3 e3,\\n        address filter,\\n        IE3Program indexed e3Program\\n    );\\n\\n    /// @notice This event MUST be emitted when an Encrypted Execution Environment (E3) is successfully activated.\\n    /// @param e3Id ID of the E3.\\n    /// @param expiration Timestamp when committee duties expire.\\n    /// @param committeePublicKey Public key of the committee.\\n    event E3Activated(\\n        uint256 e3Id,\\n        uint256 expiration,\\n        bytes committeePublicKey\\n    );\\n\\n    /// @notice This event MUST be emitted when an input to an Encrypted Execution Environment (E3) is\\n    /// successfully published.\\n    /// @param e3Id ID of the E3.\\n    /// @param data ABI encoded input data.\\n    event InputPublished(\\n        uint256 indexed e3Id,\\n        bytes data,\\n        uint256 inputHash,\\n        uint256 index\\n    );\\n\\n    /// @notice This event MUST be emitted when the plaintext output of an Encrypted Execution Environment (E3)\\n    /// is successfully published.\\n    /// @param e3Id ID of the E3.\\n    /// @param plaintextOutput ABI encoded plaintext output.\\n    event PlaintextOutputPublished(uint256 indexed e3Id, bytes plaintextOutput);\\n\\n    /// @notice This event MUST be emitted when the ciphertext output of an Encrypted Execution Environment (E3)\\n    /// is successfully published.\\n    /// @param e3Id ID of the E3.\\n    /// @param ciphertextOutput ABI encoded ciphertext output.\\n    event CiphertextOutputPublished(\\n        uint256 indexed e3Id,\\n        bytes ciphertextOutput\\n    );\\n\\n    /// @notice This event MUST be emitted any time the `maxDuration` is set.\\n    /// @param maxDuration The maximum duration of a computation in seconds.\\n    event MaxDurationSet(uint256 maxDuration);\\n\\n    /// @notice This event MUST be emitted any time the CiphernodeRegistry is set.\\n    /// @param ciphernodeRegistry The address of the CiphernodeRegistry contract.\\n    event CiphernodeRegistrySet(address ciphernodeRegistry);\\n\\n    /// @notice The event MUST be emitted any time an encryption scheme is enabled.\\n    /// @param encryptionSchemeId The ID of the encryption scheme that was enabled.\\n    event EncryptionSchemeEnabled(bytes32 encryptionSchemeId);\\n\\n    /// @notice This event MUST be emitted any time an encryption scheme is disabled.\\n    /// @param encryptionSchemeId The ID of the encryption scheme that was disabled.\\n    event EncryptionSchemeDisabled(bytes32 encryptionSchemeId);\\n\\n    /// @notice This event MUST be emitted any time a E3 Program is enabled.\\n    /// @param e3Program The address of the E3 Program.\\n    event E3ProgramEnabled(IE3Program e3Program);\\n\\n    /// @notice This event MUST be emitted any time a E3 Program is disabled.\\n    /// @param e3Program The address of the E3 Program.\\n    event E3ProgramDisabled(IE3Program e3Program);\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                  Core Entrypoints                      //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    /// @notice This function should be called to request a computation within an Encrypted Execution Environment (E3).\\n    /// @dev This function MUST emit the E3Requested event.\\n    /// @param filter IDs of the pool of nodes from which to select the committee.\\n    /// @param threshold The M/N threshold for the committee.\\n    /// @param duration The duration of the computation in seconds.\\n    /// @param e3Program Address of the E3 Program.\\n    /// @param e3ProgramParams ABI encoded computation parameters.\\n    /// @param computeProviderParams ABI encoded compute provider parameters.\\n    /// @return e3Id ID of the E3.\\n    /// @return e3 The E3 struct.\\n    function request(\\n        address filter,\\n        uint32[2] calldata threshold,\\n        uint256[2] calldata startWindow,\\n        uint256 duration,\\n        IE3Program e3Program,\\n        bytes memory e3ProgramParams,\\n        bytes memory computeProviderParams\\n    ) external payable returns (uint256 e3Id, E3 memory e3);\\n\\n    /// @notice This function should be called to activate an Encrypted Execution Environment (E3) once it has been\\n    /// initialized and is ready for input.\\n    /// @dev This function MUST emit the E3Activated event.\\n    /// @dev This function MUST revert if the given E3 has not yet been requested.\\n    /// @dev This function MUST revert if the selected node committee has not yet published a public key.\\n    /// @param e3Id ID of the E3.\\n    /// @param publicKey Public key of the committee.\\n    /// @return success True if the E3 was successfully activated.\\n    function activate(\\n        uint256 e3Id,\\n        bytes memory publicKey\\n    ) external returns (bool success);\\n\\n    /// @notice This function should be called to publish input data for Encrypted Execution Environment (E3).\\n    /// @dev This function MUST revert if the E3 is not yet activated.\\n    /// @dev This function MUST emit the InputPublished event.\\n    /// @param e3Id ID of the E3.\\n    /// @param data ABI encoded input data to publish.\\n    /// @return success True if the input was successfully published.\\n    function publishInput(\\n        uint256 e3Id,\\n        bytes calldata data\\n    ) external returns (bool success);\\n\\n    /// @notice This function should be called to publish output data for an Encrypted Execution Environment (E3).\\n    /// @dev This function MUST emit the CiphertextOutputPublished event.\\n    /// @param e3Id ID of the E3.\\n    /// @param ciphertextOutput ABI encoded output data to verify.\\n    /// @param proof ABI encoded data to verify the ciphertextOutput.\\n    /// @return success True if the output was successfully published.\\n    function publishCiphertextOutput(\\n        uint256 e3Id,\\n        bytes memory ciphertextOutput,\\n        bytes memory proof\\n    ) external returns (bool success);\\n\\n    /// @notice This function publishes the plaintext output of an Encrypted Execution Environment (E3).\\n    /// @dev This function MUST revert if the output has not been published.\\n    /// @dev This function MUST emit the PlaintextOutputPublished event.\\n    /// @param e3Id ID of the E3.\\n    /// @param plaintextOutput ABI encoded plaintext output.\\n    /// @param proof ABI encoded data to verify the plaintextOutput.\\n    function publishPlaintextOutput(\\n        uint256 e3Id,\\n        bytes memory plaintextOutput,\\n        bytes memory proof\\n    ) external returns (bool success);\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                   Set Functions                        //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    /// @notice This function should be called to set the maximum duration of requested computations.\\n    /// @param _maxDuration The maximum duration of a computation in seconds.\\n    /// @return success True if the max duration was successfully set.\\n    function setMaxDuration(\\n        uint256 _maxDuration\\n    ) external returns (bool success);\\n\\n    ////////////////////////////////////////////////////////////\\n    //                                                        //\\n    //                   Get Functions                        //\\n    //                                                        //\\n    ////////////////////////////////////////////////////////////\\n\\n    /// @notice This function should be called to retrieve the details of an Encrypted Execution Environment (E3).\\n    /// @dev This function MUST revert if the E3 does not exist.\\n    /// @param e3Id ID of the E3.\\n    /// @return e3 The struct representing the requested E3.\\n    function getE3(uint256 e3Id) external view returns (E3 memory e3);\\n\\n    /// @notice This function returns root of the input merkle tree for a given E3.\\n    /// @dev This function MUST revert if the E3 does not exist.\\n    /// @param e3Id ID of the E3.\\n    /// @return root The root of the input merkle tree.\\n    function getInputRoot(uint256 e3Id) external view returns (uint256 root);\\n}\\n\",\"keccak256\":\"0xb1c9cd24aeb1dbf988555945ae532860c8a60a874f19020e48e29c9e3e5ebb64\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IInputValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.27;\\n\\ninterface IInputValidator {\\n    /// @notice This function should be called by the Enclave contract to validate the\\n    /// input of a computation.\\n    /// @param sender The account that is submitting the input.\\n    /// @param data The input to be verified.\\n    /// @return input The decoded, policy-approved application payload.\\n    function validate(\\n        address sender,\\n        bytes memory data\\n    ) external returns (bytes memory input);\\n}\\n\",\"keccak256\":\"0x20d4016bd59c317c5571cfe6c3e8f46cbabddc0b926dc64019eeae8d29788653\",\"license\":\"LGPL-3.0-only\"},\"poseidon-solidity/PoseidonT3.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nlibrary PoseidonT3 {\\n  uint constant M00 = 0x109b7f411ba0e4c9b2b70caf5c36a7b194be7c11ad24378bfedb68592ba8118b;\\n  uint constant M01 = 0x2969f27eed31a480b9c36c764379dbca2cc8fdd1415c3dded62940bcde0bd771;\\n  uint constant M02 = 0x143021ec686a3f330d5f9e654638065ce6cd79e28c5b3753326244ee65a1b1a7;\\n  uint constant M10 = 0x16ed41e13bb9c0c66ae119424fddbcbc9314dc9fdbdeea55d6c64543dc4903e0;\\n  uint constant M11 = 0x2e2419f9ec02ec394c9871c832963dc1b89d743c8c7b964029b2311687b1fe23;\\n  uint constant M12 = 0x176cc029695ad02582a70eff08a6fd99d057e12e58e7d7b6b16cdfabc8ee2911;\\n\\n  // See here for a simplified implementation: https://github.com/vimwitch/poseidon-solidity/blob/e57becdabb65d99fdc586fe1e1e09e7108202d53/contracts/Poseidon.sol#L40\\n  // Inspired by: https://github.com/iden3/circomlibjs/blob/v0.0.8/src/poseidon_slow.js\\n  function hash(uint[2] memory) public pure returns (uint) {\\n    assembly {\\n      let F := 21888242871839275222246405745257275088548364400416034343698204186575808495617\\n      let M20 := 0x2b90bba00fca0589f617e7dcbfe82e0df706ab640ceb247b791a93b74e36736d\\n      let M21 := 0x101071f0032379b697315876690f053d148d4e109f5fb065c8aacc55a0f89bfa\\n      let M22 := 0x19a3fc0a56702bf417ba7fee3802593fa644470307043f7773279cd71d25d5e0\\n\\n      // load the inputs from memory\\n      let state1 := add(mod(mload(0x80), F), 0x00f1445235f2148c5986587169fc1bcd887b08d4d00868df5696fff40956e864)\\n      let state2 := add(mod(mload(0xa0), F), 0x08dff3487e8ac99e1f29a058d0fa80b930c728730b7ab36ce879f3890ecf73f5)\\n      let scratch0 := mulmod(state1, state1, F)\\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\\n      scratch0 := mulmod(state2, state2, F)\\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\\n      scratch0 := add(\\n        0x2f27be690fdaee46c3ce28f7532b13c856c35342c84bda6e20966310fadc01d0,\\n        add(add(15452833169820924772166449970675545095234312153403844297388521437673434406763, mulmod(state1, M10, F)), mulmod(state2, M20, F))\\n      )\\n      let scratch1 := add(\\n        0x2b2ae1acf68b7b8d2416bebf3d4f6234b763fe04b8043ee48b8327bebca16cf2,\\n        add(add(18674271267752038776579386132900109523609358935013267566297499497165104279117, mulmod(state1, M11, F)), mulmod(state2, M21, F))\\n      )\\n      let scratch2 := add(\\n        0x0319d062072bef7ecca5eac06f97d4d55952c175ab6b03eae64b44c7dbf11cfa,\\n        add(add(14817777843080276494683266178512808687156649753153012854386334860566696099579, mulmod(state1, M12, F)), mulmod(state2, M22, F))\\n      )\\n      let state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := mulmod(scratch1, scratch1, F)\\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\\n      state0 := mulmod(scratch2, scratch2, F)\\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\\n      state0 := add(0x28813dcaebaeaa828a376df87af4a63bc8b7bf27ad49c6298ef7b387bf28526d, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x2727673b2ccbc903f181bf38e1c1d40d2033865200c352bc150928adddf9cb78, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x234ec45ca27727c2e74abd2b2a1494cd6efbd43e340587d6b8fb9e31e65cc632, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := mulmod(state1, state1, F)\\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\\n      scratch0 := mulmod(state2, state2, F)\\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\\n      scratch0 := add(0x15b52534031ae18f7f862cb2cf7cf760ab10a8150a337b1ccd99ff6e8797d428, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x0dc8fad6d9e4b35f5ed9a3d186b79ce38e0e8a8d1b58b132d701d4eecf68d1f6, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x1bcd95ffc211fbca600f705fad3fb567ea4eb378f62e1fec97805518a47e4d9c, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := mulmod(scratch1, scratch1, F)\\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\\n      state0 := mulmod(scratch2, scratch2, F)\\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\\n      state0 := add(0x10520b0ab721cadfe9eff81b016fc34dc76da36c2578937817cb978d069de559, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x1f6d48149b8e7f7d9b257d8ed5fbbaf42932498075fed0ace88a9eb81f5627f6, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x1d9655f652309014d29e00ef35a2089bfff8dc1c816f0dc9ca34bdb5460c8705, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x04df5a56ff95bcafb051f7b1cd43a99ba731ff67e47032058fe3d4185697cc7d, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x0672d995f8fff640151b3d290cedaf148690a10a8c8424a7f6ec282b6e4be828, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x099952b414884454b21200d7ffafdd5f0c9a9dcc06f2708e9fc1d8209b5c75b9, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x052cba2255dfd00c7c483143ba8d469448e43586a9b4cd9183fd0e843a6b9fa6, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x0b8badee690adb8eb0bd74712b7999af82de55707251ad7716077cb93c464ddc, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x119b1590f13307af5a1ee651020c07c749c15d60683a8050b963d0a8e4b2bdd1, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x03150b7cd6d5d17b2529d36be0f67b832c4acfc884ef4ee5ce15be0bfb4a8d09, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x2cc6182c5e14546e3cf1951f173912355374efb83d80898abe69cb317c9ea565, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x005032551e6378c450cfe129a404b3764218cadedac14e2b92d2cd73111bf0f9, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x233237e3289baa34bb147e972ebcb9516469c399fcc069fb88f9da2cc28276b5, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x05c8f4f4ebd4a6e3c980d31674bfbe6323037f21b34ae5a4e80c2d4c24d60280, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x0a7b1db13042d396ba05d818a319f25252bcf35ef3aeed91ee1f09b2590fc65b, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x2a73b71f9b210cf5b14296572c9d32dbf156e2b086ff47dc5df542365a404ec0, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x1ac9b0417abcc9a1935107e9ffc91dc3ec18f2c4dbe7f22976a760bb5c50c460, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x12c0339ae08374823fabb076707ef479269f3e4d6cb104349015ee046dc93fc0, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x0b7475b102a165ad7f5b18db4e1e704f52900aa3253baac68246682e56e9a28e, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x037c2849e191ca3edb1c5e49f6e8b8917c843e379366f2ea32ab3aa88d7f8448, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x05a6811f8556f014e92674661e217e9bd5206c5c93a07dc145fdb176a716346f, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x29a795e7d98028946e947b75d54e9f044076e87a7b2883b47b675ef5f38bd66e, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x20439a0c84b322eb45a3857afc18f5826e8c7382c8a1585c507be199981fd22f, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x2e0ba8d94d9ecf4a94ec2050c7371ff1bb50f27799a84b6d4a2a6f2a0982c887, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x143fd115ce08fb27ca38eb7cce822b4517822cd2109048d2e6d0ddcca17d71c8, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x0c64cbecb1c734b857968dbbdcf813cdf8611659323dbcbfc84323623be9caf1, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x028a305847c683f646fca925c163ff5ae74f348d62c2b670f1426cef9403da53, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x2e4ef510ff0b6fda5fa940ab4c4380f26a6bcb64d89427b824d6755b5db9e30c, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x0081c95bc43384e663d79270c956ce3b8925b4f6d033b078b96384f50579400e, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x2ed5f0c91cbd9749187e2fade687e05ee2491b349c039a0bba8a9f4023a0bb38, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x30509991f88da3504bbf374ed5aae2f03448a22c76234c8c990f01f33a735206, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x1c3f20fd55409a53221b7c4d49a356b9f0a1119fb2067b41a7529094424ec6ad, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x10b4e7f3ab5df003049514459b6e18eec46bb2213e8e131e170887b47ddcb96c, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x2a1982979c3ff7f43ddd543d891c2abddd80f804c077d775039aa3502e43adef, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x1c74ee64f15e1db6feddbead56d6d55dba431ebc396c9af95cad0f1315bd5c91, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x07533ec850ba7f98eab9303cace01b4b9e4f2e8b82708cfa9c2fe45a0ae146a0, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x21576b438e500449a151e4eeaf17b154285c68f42d42c1808a11abf3764c0750, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x2f17c0559b8fe79608ad5ca193d62f10bce8384c815f0906743d6930836d4a9e, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x2d477e3862d07708a79e8aae946170bc9775a4201318474ae665b0b1b7e2730e, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x162f5243967064c390e095577984f291afba2266c38f5abcd89be0f5b2747eab, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x2b4cb233ede9ba48264ecd2c8ae50d1ad7a8596a87f29f8a7777a70092393311, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x2c8fbcb2dd8573dc1dbaf8f4622854776db2eece6d85c4cf4254e7c35e03b07a, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x1d6f347725e4816af2ff453f0cd56b199e1b61e9f601e9ade5e88db870949da9, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x204b0c397f4ebe71ebc2d8b3df5b913df9e6ac02b68d31324cd49af5c4565529, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x0c4cb9dc3c4fd8174f1149b3c63c3c2f9ecb827cd7dc25534ff8fb75bc79c502, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x174ad61a1448c899a25416474f4930301e5c49475279e0639a616ddc45bc7b54, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x1a96177bcf4d8d89f759df4ec2f3cde2eaaa28c177cc0fa13a9816d49a38d2ef, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x066d04b24331d71cd0ef8054bc60c4ff05202c126a233c1a8242ace360b8a30a, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x2a4c4fc6ec0b0cf52195782871c6dd3b381cc65f72e02ad527037a62aa1bd804, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x13ab2d136ccf37d447e9f2e14a7cedc95e727f8446f6d9d7e55afc01219fd649, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x1121552fca26061619d24d843dc82769c1b04fcec26f55194c2e3e869acc6a9a, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x00ef653322b13d6c889bc81715c37d77a6cd267d595c4a8909a5546c7c97cff1, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x0e25483e45a665208b261d8ba74051e6400c776d652595d9845aca35d8a397d3, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x29f536dcb9dd7682245264659e15d88e395ac3d4dde92d8c46448db979eeba89, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x2a56ef9f2c53febadfda33575dbdbd885a124e2780bbea170e456baace0fa5be, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x1c8361c78eb5cf5decfb7a2d17b5c409f2ae2999a46762e8ee416240a8cb9af1, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x151aff5f38b20a0fc0473089aaf0206b83e8e68a764507bfd3d0ab4be74319c5, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x04c6187e41ed881dc1b239c88f7f9d43a9f52fc8c8b6cdd1e76e47615b51f100, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x13b37bd80f4d27fb10d84331f6fb6d534b81c61ed15776449e801b7ddc9c2967, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x01a5c536273c2d9df578bfbd32c17b7a2ce3664c2a52032c9321ceb1c4e8a8e4, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x2ab3561834ca73835ad05f5d7acb950b4a9a2c666b9726da832239065b7c3b02, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x1d4d8ec291e720db200fe6d686c0d613acaf6af4e95d3bf69f7ed516a597b646, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x041294d2cc484d228f5784fe7919fd2bb925351240a04b711514c9c80b65af1d, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x154ac98e01708c611c4fa715991f004898f57939d126e392042971dd90e81fc6, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x0b339d8acca7d4f83eedd84093aef51050b3684c88f8b0b04524563bc6ea4da4, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x0955e49e6610c94254a4f84cfbab344598f0e71eaff4a7dd81ed95b50839c82e, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x06746a6156eba54426b9e22206f15abca9a6f41e6f535c6f3525401ea0654626, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x0f18f5a0ecd1423c496f3820c549c27838e5790e2bd0a196ac917c7ff32077fb, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x04f6eeca1751f7308ac59eff5beb261e4bb563583ede7bc92a738223d6f76e13, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x2b56973364c4c4f5c1a3ec4da3cdce038811eb116fb3e45bc1768d26fc0b3758, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x123769dd49d5b054dcd76b89804b1bcb8e1392b385716a5d83feb65d437f29ef, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x2147b424fc48c80a88ee52b91169aacea989f6446471150994257b2fb01c63e9, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x0fdc1f58548b85701a6c5505ea332a29647e6f34ad4243c2ea54ad897cebe54d, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x12373a8251fea004df68abcf0f7786d4bceff28c5dbbe0c3944f685cc0a0b1f2, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x21e4f4ea5f35f85bad7ea52ff742c9e8a642756b6af44203dd8a1f35c1a90035, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x16243916d69d2ca3dfb4722224d4c462b57366492f45e90d8a81934f1bc3b147, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x1efbe46dd7a578b4f66f9adbc88b4378abc21566e1a0453ca13a4159cac04ac2, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x07ea5e8537cf5dd08886020e23a7f387d468d5525be66f853b672cc96a88969a, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x05a8c4f9968b8aa3b7b478a30f9a5b63650f19a75e7ce11ca9fe16c0b76c00bc, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x20f057712cc21654fbfe59bd345e8dac3f7818c701b9c7882d9d57b72a32e83f, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x04a12ededa9dfd689672f8c67fee31636dcd8e88d01d49019bd90b33eb33db69, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x27e88d8c15f37dcee44f1e5425a51decbd136ce5091a6767e49ec9544ccd101a, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x2feed17b84285ed9b8a5c8c5e95a41f66e096619a7703223176c41ee433de4d1, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x1ed7cc76edf45c7c404241420f729cf394e5942911312a0d6972b8bd53aff2b8, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x15742e99b9bfa323157ff8c586f5660eac6783476144cdcadf2874be45466b1a, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x1aac285387f65e82c895fc6887ddf40577107454c6ec0317284f033f27d0c785, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x25851c3c845d4790f9ddadbdb6057357832e2e7a49775f71ec75a96554d67c77, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x15a5821565cc2ec2ce78457db197edf353b7ebba2c5523370ddccc3d9f146a67, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x2411d57a4813b9980efa7e31a1db5966dcf64f36044277502f15485f28c71727, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x002e6f8d6520cd4713e335b8c0b6d2e647e9a98e12f4cd2558828b5ef6cb4c9b, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x2ff7bc8f4380cde997da00b616b0fcd1af8f0e91e2fe1ed7398834609e0315d2, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x00b9831b948525595ee02724471bcd182e9521f6b7bb68f1e93be4febb0d3cbe, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x0a2f53768b8ebf6a86913b0e57c04e011ca408648a4743a87d77adbf0c9c3512, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x00248156142fd0373a479f91ff239e960f599ff7e94be69b7f2a290305e1198d, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x171d5620b87bfb1328cf8c02ab3f0c9a397196aa6a542c2350eb512a2b2bcda9, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x170a4f55536f7dc970087c7c10d6fad760c952172dd54dd99d1045e4ec34a808, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x29aba33f799fe66c2ef3134aea04336ecc37e38c1cd211ba482eca17e2dbfae1, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x1e9bc179a4fdd758fdd1bb1945088d47e70d114a03f6a0e8b5ba650369e64973, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x1dd269799b660fad58f7f4892dfb0b5afeaad869a9c4b44f9c9e1c43bdaf8f09, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x22cdbc8b70117ad1401181d02e15459e7ccd426fe869c7c95d1dd2cb0f24af38, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x0ef042e454771c533a9f57a55c503fcefd3150f52ed94a7cd5ba93b9c7dacefd, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x11609e06ad6c8fe2f287f3036037e8851318e8b08a0359a03b304ffca62e8284, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x1166d9e554616dba9e753eea427c17b7fecd58c076dfe42708b08f5b783aa9af, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x2de52989431a859593413026354413db177fbf4cd2ac0b56f855a888357ee466, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x3006eb4ffc7a85819a6da492f3a8ac1df51aee5b17b8e89d74bf01cf5f71e9ad, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x2af41fbb61ba8a80fdcf6fff9e3f6f422993fe8f0a4639f962344c8225145086, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x119e684de476155fe5a6b41a8ebc85db8718ab27889e85e781b214bace4827c3, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x1835b786e2e8925e188bea59ae363537b51248c23828f047cff784b97b3fd800, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x28201a34c594dfa34d794996c6433a20d152bac2a7905c926c40e285ab32eeb6, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x083efd7a27d1751094e80fefaf78b000864c82eb571187724a761f88c22cc4e7, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x0b6f88a3577199526158e61ceea27be811c16df7774dd8519e079564f61fd13b, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x0ec868e6d15e51d9644f66e1d6471a94589511ca00d29e1014390e6ee4254f5b, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x2af33e3f866771271ac0c9b3ed2e1142ecd3e74b939cd40d00d937ab84c98591, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x0b520211f904b5e7d09b5d961c6ace7734568c547dd6858b364ce5e47951f178, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x0b2d722d0919a1aad8db58f10062a92ea0c56ac4270e822cca228620188a1d40, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x1f790d4d7f8cf094d980ceb37c2453e957b54a9991ca38bbe0061d1ed6e562d4, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x0171eb95dfbf7d1eaea97cd385f780150885c16235a2a6a8da92ceb01e504233, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x0c2d0e3b5fd57549329bf6885da66b9b790b40defd2c8650762305381b168873, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x1162fb28689c27154e5a8228b4e72b377cbcafa589e283c35d3803054407a18d, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x2f1459b65dee441b64ad386a91e8310f282c5a92a89e19921623ef8249711bc0, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x1e6ff3216b688c3d996d74367d5cd4c1bc489d46754eb712c243f70d1b53cfbb, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x01ca8be73832b8d0681487d27d157802d741a6f36cdc2a0576881f9326478875, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x1f7735706ffe9fc586f976d5bdf223dc680286080b10cea00b9b5de315f9650e, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x2522b60f4ea3307640a0c2dce041fba921ac10a3d5f096ef4745ca838285f019, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x23f0bee001b1029d5255075ddc957f833418cad4f52b6c3f8ce16c235572575b, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x2bc1ae8b8ddbb81fcaac2d44555ed5685d142633e9df905f66d9401093082d59, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x0f9406b8296564a37304507b8dba3ed162371273a07b1fc98011fcd6ad72205f, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x2360a8eb0cc7defa67b72998de90714e17e75b174a52ee4acb126c8cd995f0a8, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x15871a5cddead976804c803cbaef255eb4815a5e96df8b006dcbbc2767f88948, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x193a56766998ee9e0a8652dd2f3b1da0362f4f54f72379544f957ccdeefb420f, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x2a394a43934f86982f9be56ff4fab1703b2e63c8ad334834e4309805e777ae0f, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x1859954cfeb8695f3e8b635dcb345192892cd11223443ba7b4166e8876c0d142, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x04e1181763050e58013444dbcb99f1902b11bc25d90bbdca408d3819f4fed32b, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x0fdb253dee83869d40c335ea64de8c5bb10eb82db08b5e8b1f5e5552bfd05f23, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x058cbe8a9a5027bdaa4efb623adead6275f08686f1c08984a9d7c5bae9b4f1c0, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x1382edce9971e186497eadb1aeb1f52b23b4b83bef023ab0d15228b4cceca59a, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x03464990f045c6ee0819ca51fd11b0be7f61b8eb99f14b77e1e6634601d9e8b5, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x23f7bfc8720dc296fff33b41f98ff83c6fcab4605db2eb5aaa5bc137aeb70a58, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x0a59a158e3eec2117e6e94e7f0e9decf18c3ffd5e1531a9219636158bbaf62f2, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x06ec54c80381c052b58bf23b312ffd3ce2c4eba065420af8f4c23ed0075fd07b, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x118872dc832e0eb5476b56648e867ec8b09340f7a7bcb1b4962f0ff9ed1f9d01, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x13d69fa127d834165ad5c7cba7ad59ed52e0b0f0e42d7fea95e1906b520921b1, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x169a177f63ea681270b1c6877a73d21bde143942fb71dc55fd8a49f19f10c77b, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x04ef51591c6ead97ef42f287adce40d93abeb032b922f66ffb7e9a5a7450544d, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x256e175a1dc079390ecd7ca703fb2e3b19ec61805d4f03ced5f45ee6dd0f69ec, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x30102d28636abd5fe5f2af412ff6004f75cc360d3205dd2da002813d3e2ceeb2, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x10998e42dfcd3bbf1c0714bc73eb1bf40443a3fa99bef4a31fd31be182fcc792, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x193edd8e9fcf3d7625fa7d24b598a1d89f3362eaf4d582efecad76f879e36860, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x18168afd34f2d915d0368ce80b7b3347d1c7a561ce611425f2664d7aa51f0b5d, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x29383c01ebd3b6ab0c017656ebe658b6a328ec77bc33626e29e2e95b33ea6111, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x10646d2f2603de39a1f4ae5e7771a64a702db6e86fb76ab600bf573f9010c711, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x0beb5e07d1b27145f575f1395a55bf132f90c25b40da7b3864d0242dcb1117fb, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x16d685252078c133dc0d3ecad62b5c8830f95bb2e54b59abdffbf018d96fa336, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x0a6abd1d833938f33c74154e0404b4b40a555bbbec21ddfafd672dd62047f01a, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x1a679f5d36eb7b5c8ea12a4c2dedc8feb12dffeec450317270a6f19b34cf1860, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x0980fb233bd456c23974d50e0ebfde4726a423eada4e8f6ffbc7592e3f1b93d6, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x161b42232e61b84cbf1810af93a38fc0cece3d5628c9282003ebacb5c312c72b, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x0ada10a90c7f0520950f7d47a60d5e6a493f09787f1564e5d09203db47de1a0b, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x1a730d372310ba82320345a29ac4238ed3f07a8a2b4e121bb50ddb9af407f451, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x2c8120f268ef054f817064c369dda7ea908377feaba5c4dffbda10ef58e8c556, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x1c7c8824f758753fa57c00789c684217b930e95313bcb73e6e7b8649a4968f70, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x2cd9ed31f5f8691c8e39e4077a74faa0f400ad8b491eb3f7b47b27fa3fd1cf77, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x23ff4f9d46813457cf60d92f57618399a5e022ac321ca550854ae23918a22eea, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x09945a5d147a4f66ceece6405dddd9d0af5a2c5103529407dff1ea58f180426d, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x188d9c528025d4c2b67660c6b771b90f7c7da6eaa29d3f268a6dd223ec6fc630, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x3050e37996596b7f81f68311431d8734dba7d926d3633595e0c0d8ddf4f0f47f, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x15af1169396830a91600ca8102c35c426ceae5461e3f95d89d829518d30afd78, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x1da6d09885432ea9a06d9f37f873d985dae933e351466b2904284da3320d8acc, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := add(0x2796ea90d269af29f5f8acf33921124e4e4fad3dbe658945e546ee411ddaa9cb, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x202d7dd1da0f6b4b0325c8b3307742f01e15612ec8e9304a7cb0319e01d32d60, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x096d6790d05bb759156a952ba263d672a2d7f9c788f4c831a29dace4c0f8be5f, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := add(0x054efa1f65b0fce283808965275d877b438da23ce5b13e1963798cb1447d25a4, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x1b162f83d917e93edb3308c29802deb9d8aa690113b2e14864ccf6e18e4165f1, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x21e5241e12564dd6fd9f1cdd2a0de39eedfefc1466cc568ec5ceb745a0506edc, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := mulmod(scratch1, scratch1, F)\\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\\n      state0 := mulmod(scratch2, scratch2, F)\\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\\n      state0 := add(0x1cfb5662e8cf5ac9226a80ee17b36abecb73ab5f87e161927b4349e10e4bdf08, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x0f21177e302a771bbae6d8d1ecb373b62c99af346220ac0129c53f666eb24100, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x1671522374606992affb0dd7f71b12bec4236aede6290546bcef7e1f515c2320, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := mulmod(state1, state1, F)\\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\\n      scratch0 := mulmod(state2, state2, F)\\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\\n      scratch0 := add(0x0fa3ec5b9488259c2eb4cf24501bfad9be2ec9e42c5cc8ccd419d2a692cad870, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\\n      scratch1 := add(0x193c0e04e0bd298357cb266c1506080ed36edce85c648cc085e8c57b1ab54bba, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\\n      scratch2 := add(0x102adf8ef74735a27e9128306dcbc3c99f6f7291cd406578ce14ea2adaba68f8, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\\n      state0 := mulmod(scratch0, scratch0, F)\\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\\n      state0 := mulmod(scratch1, scratch1, F)\\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\\n      state0 := mulmod(scratch2, scratch2, F)\\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\\n      state0 := add(0x0fe0af7858e49859e2a54d6f1ad945b1316aa24bfbdd23ae40a6d0cb70c3eab1, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\\n      state1 := add(0x216f6717bbc7dedb08536a2220843f4e2da5f1daa9ebdefde8a5ea7344798d22, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\\n      state2 := add(0x1da55cc900f0d21f4a3e694391918a1b3c23b2ac773c6b3ef88e2e4228325161, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\\n      scratch0 := mulmod(state0, state0, F)\\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\\n      scratch0 := mulmod(state1, state1, F)\\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\\n      scratch0 := mulmod(state2, state2, F)\\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\\n\\n      mstore(0x0, mod(add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)), F))\\n\\n      return(0, 0x20)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x0102caa303bbc6690508f3615604f7730789ed990058c9513a87ccb30e4835be\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80630e092fc314611b405780630ef81b2f14611b0b57806310bc628114611b0b5780631794bb3c146118e55780634017daf0146117f8578063406ed35c146117c55780634e92ec63146117375780634fc77264146116975780635314e9fa1461150d5780636db5c8fd146114ef578063715018a6146114565780637edcd7ab146111fd5780638da5cb5b146111b75780638dcdd86b1461119057806393b58f861461099b5780639c8570c814610828578063b3c88d67146107fc578063b74cb2db146107de578063c4ccafa21461079f578063cb64961714610781578063cbd16872146106c8578063cf0f34c4146106aa578063d016b08d14610279578063ddef9ea114610244578063f2fde38b14610219578063fad8e111146101ec5763fd2f3d011461014557600080fd5b346101e75760203660031901126101e7576001600160a01b03610166611ba5565b61016e6123d7565b1680600052600460205260ff604060002054166101d3576020817fb8d368517268f297fff00825d67d098763117d061360d31027be5b2e1a59d46792600052600482526040600020600160ff19825416179055604051908152a1602060405160018152f35b63b29d459560e01b60005260045260246000fd5b600080fd5b346101e75760203660031901126101e757602061020f61020a611ba5565b61234c565b6040519015158152f35b346101e75760203660031901126101e757610242610235611ba5565b61023d6123d7565b6122a6565b005b346101e75760203660031901126101e75760043560005260066020526040806000206001815491015482519182526020820152f35b346101e75761028736611ec0565b61029082611fea565b60a081016102a1848251151561213a565b514281111561069257506102ec6000926001600160a01b0361012085940151169060405194858094819363caf9278560e01b8352336004840152604060248401526044830190611d17565b03925af180156105915760009061060d575b61035a915073__$75f79a42d9bcbdbb69ad79ebd80f556f39$__602060405161032681611c12565b835182850120815285600052600782526040600020548282015260405180958192632b0aac7f60e11b835260048301612278565b0381845af4928315610591576000936105d9575b508360005260076020526040600020610387815461222d565b905560008481526006602052604090207f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184106103cf576361c0541760e11b60005260046000fd5b836103e5576314b48df160e11b60005260046000fd5b83600052600381016020526040600020546105c857805491600182019283549360ff85116104d257600182018083116104d2576001861b106105b8575b84905585916000905b8582106104e8575050906104416003939261222d565b938483556000526002820160205260406000205584600052016020526040600020558260005260076020526040600020549060001982019182116104d2577f7555a0b1b87fe36304326aed23f5c78102b63922b1141f8df7d4593eff2021dd926104b992604051938493606085526060850190611d17565b91602084015260408301520390a2602060405160018152f35b634e487b7160e01b600052601160045260246000fd5b909260018084861c161460001461059d57602061053c916040519061050c82611c12565b8660005260028801835260406000205482528282015260405180938192632b0aac7f60e11b835260048301612278565b0381855af480156105915760009061055c575b60019150935b019061042b565b6020823d8211610589575b8161057460209383611c2e565b8101031261058657506001905161054f565b80fd5b3d9150610567565b6040513d6000823e3d90fd5b92806001916000526002860160205284604060002055610555565b936105c29061222d565b93610422565b6312c50cad60e11b60005260046000fd5b90926020823d602011610605575b816105f460209383611c2e565b81010312610586575051918461036e565b3d91506105e7565b3d8082843e61061c8184611c2e565b82019160208184031261068a5780519067ffffffffffffffff821161068e570182601f8201121561068a5780519161065383611e5d565b936106616040519586611c2e565b83855260208484010111610586575082916106859160208061035a96019101611cf4565b6102fe565b5080fd5b8280fd5b8363142c294360e31b60005260045260245260446000fd5b346101e75760203660031901126101e757602061020f60043561223c565b346101e75760403660031901126101e7576004356024356001600160a01b0381168091036101e7577ff4041a3f914dac3bc9bf5f003ba41f28dbb84abe42f4e07c76266f5c8ceecb699160209161071d6123d7565b801515828161075f575b6107309161211e565b81600052600883526040600020906001600160a01b0319825416179055604051908152a1602060405160018152f35b60009081526008855260409020546001600160a01b0316821415905082610727565b346101e75760003660031901126101e7576020600254604051908152f35b346101e75760203660031901126101e7576001600160a01b036107c0611ba5565b166000526004602052602060ff604060002054166040519015158152f35b346101e75760003660031901126101e7576020600354604051908152f35b346101e75760203660031901126101e75760043560005260076020526020604060002054604051908152f35b346101e75761083636611ef0565b9161084081611fea565b9160a08301610852838251151561213a565b51428111610983575061018083015161096e5760206108a06000956001600160a01b0360e08551858701209701511690604051978880948193632f0e1bbf60e01b83528a8a6004850161216e565b03925af192831561059157602094600094610917575b508161090a916108e77f7cc27e4a5626cbc4f8ba1a927b0448de55e6a114bc87660331270c5109ade071948761218a565b8460005260058752600d6040600020015560405191829187835287830190611d17565b0390a26040519015158152f35b61090a9194509161095e7f7cc27e4a5626cbc4f8ba1a927b0448de55e6a114bc87660331270c5109ade07193873d8911610967575b6109568183611c2e565b810190612156565b949150916108b6565b503d61094c565b50637eb9cea960e11b60005260045260246000fd5b826370c05fb960e11b60005260045260245260446000fd5b6101203660031901126101e7576109b0611ba5565b366064116101e7573660a4116101e75760a43560c435916001600160a01b03831683036101e75760e43567ffffffffffffffff81116101e7576109f7903690600401611e79565b906101043567ffffffffffffffff81116101e757610a19903690600401611e79565b90610a22611f5b565b50341561117b5760443563ffffffff8116908181036101e7575063ffffffff610a496121d2565b16111580611165575b1561114757608435606435811015908161113c575b501561112b578315158061111f575b1561110a576001600160a01b038516600052600460205260ff60406000205416156110ec57610b149060025493610aac8561222d565b6002556040805160208101904482528783820152828152610ace606082611c2e565b5190209481518095819263530ebf1f60e11b835289600484015288602484015260806044840152610b026084840187611d17565b83810360031901606485015290611d17565b038160006001600160a01b038c165af190811561059157600093849261109b575b506000848152600860205260409020546001600160a01b0390811692610b5d8685151561211e565b169081156110865760405195610b7287611bf5565b8652604094855198610b84878b611c2e565b6000996024815b6064821061106e575050602089015243878901528651610bab8882611c2e565b6064815b60a4821061105e575050606089015260808801528860a088015260c08701526001600160a01b03891660e087015261010086015261012085015261014084015284610160840152846101808401526020948251610c0c8782611c2e565b8181526101a0850152848152600586528281208451815560208501518290835b89600282106110365750505060018201558385015160028201556060850151825b600281106110215750506080850151600582015560a0850151600682015560c085015160078201556001600160a01b0360e0860151166001600160a01b036008830191166001600160a01b031982541617905561010085015180519067ffffffffffffffff8211610f6257610cc56009840154611bbb565b601f8111610ff0575b508890601f8311600114610f8157600e939291859183610f76575b50508160011b916000199060031b1c19161760098201555b6001600160a01b03610120870151166001600160a01b03600a830191166001600160a01b03198254161790556001600160a01b03610140870151166001600160a01b03600b830191166001600160a01b0319825416179055610160860151600c820155610180860151600d820155016101a085015180519067ffffffffffffffff8211610f62578190610d948454611bbb565b601f8111610f29575b508990601f8311600114610ec6578592610ebb575b50508160011b916000199060031b1c19161790555b80866001600160a01b036084818454169587519485938492639ccb58d560e01b84528c60048501521697886024840152610e03604484016121f6565b5af1908115610eb1578291610e94575b5015610e8557507fe31ba2ed37bce9c2bca28aabe3990572a1694b7a208f61e5cced4471fa33c8e56001600160a01b03610e81959697845191829189835260608b840152610e646060840189611d3c565b958784015216930390a28080519586958652850152830190611d3c565b0390f35b630d8dbe2560e01b8152600490fd5b610eab9150873d8911610967576109568183611c2e565b88610e13565b84513d84823e3d90fd5b015190508a80610db2565b8486528a86209250601f198416865b8c828210610f13575050908460019594939210610efa575b505050811b019055610dc7565b015160001960f88460031b161c191690558a8080610eed565b6001859682939686015181550195019301610ed5565b610f52908587528b8720601f850160051c8101918d8610610f58575b601f0160051c01906121bb565b8b610d9d565b9091508190610f45565b634e487b7160e01b84526041600452602484fd5b015190508b80610ce9565b9060098401855289852091855b8b601f1986168210610fda575050918391600193600e9695601f19811610610fc1575b505050811b016009820155610d01565b015160001960f88460031b161c191690558b8080610fb1565b6001849582939585015181550194019201610f8e565b61101b906009850186528a8620601f850160051c8101918c8610610f5857601f0160051c01906121bb565b8a610cce565b81518382016003015590880190600101610c4d565b829363ffffffff6001939451169063ffffffff8560051b92831b921b19161793019101610c2c565b8135815260209182019101610baf565b6020809161107b846121e5565b815201910190610b8b565b50633ca1cee360e11b60005260045260246000fd5b9091506040813d6040116110e4575b816110b760409383611c2e565b810103126110e05760208151910151936001600160a01b03851685036105865750929088610b35565b8380fd5b3d91506110aa565b6001600160a01b038563295a6a6f60e11b6000521660045260246000fd5b836313b783af60e21b60005260045260246000fd5b50600154841115610a76565b6308594fb760e01b60005260046000fd5b905042111586610a67565b604051633744092160e21b8152604490611163600482016121f6565bfd5b5063ffffffff6111736121d2565b161515610a52565b638c4fcd9360e01b6000523460045260246000fd5b346101e75760003660031901126101e75760206001600160a01b0360005416604051908152f35b346101e75760003660031901126101e75760206001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005416604051908152f35b346101e75761120b36611ef0565b611216839293611fea565b6112268360a0830151151561213a565b61018081015115611441576101a08101515161142c5761127592916001600160a01b03610140602093015116855183870120604051809681948293632f0e1bbf60e01b8452886004850161216e565b03915afa9182156105915760009261140b575b50611293838361218a565b806000526005602052600e6040600020019280519367ffffffffffffffff85116113f5576020946112c48254611bbb565b601f81116113c5575b5085601f821160011461133c5791817f02a24c3402076671e129905ba4579d884b1f94ded1c07fc03d26d11b60bca169949261090a94600091611331575b508160011b916000199060031b1c19161790555b60405191829187835287830190611d17565b90508301518961130b565b601f1982169083600052806000209160005b8181106113ae57509261090a9492600192827f02a24c3402076671e129905ba4579d884b1f94ded1c07fc03d26d11b60bca169989610611395575b5050811b01905561131f565b85015160001960f88460031b161c191690558980611389565b91928960018192868a01518155019401920161134e565b6113ef908360005287600020601f840160051c810191898510610f5857601f0160051c01906121bb565b866112cd565b634e487b7160e01b600052604160045260246000fd5b61142591925060203d602011610967576109568183611c2e565b9083611288565b826360ec327960e01b60005260045260246000fd5b8263032c20ef60e21b60005260045260246000fd5b346101e75760003660031901126101e75761146f6123d7565b60006001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031981167f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101e75760003660031901126101e7576020600154604051908152f35b346101e75761151b36611ec0565b61152482611fea565b9160a083018051611682576060840180515142106116715760204291510151106116605760249360206001600160a01b036000541660405196878092630e82f3b760e41b82528760048301525afa9485156105915760009561162c575b50835194602085019586200361161b57608001514201908142116104d2577f50df9e2c9fc5a7f4a07e403fa0300b88fcc8c6943bdff4b8ae71f55b7fd95f899461160d9284600052600560205260066040600020015584519020836000526005602052600c60406000200155519260405193849384526020840152606060408401526060830190611d17565b0390a1602060405160018152f35b630d8dbe2560e01b60005260046000fd5b9094506020813d602011611658575b8161164860209383611c2e565b810103126101e757519385611581565b3d915061163b565b633d82a7cd60e11b60005260046000fd5b63a0750b5160e01b60005260046000fd5b50633e26347b60e21b60005260045260246000fd5b346101e75760203660031901126101e7576001600160a01b036116b8611ba5565b6116c06123d7565b1680600052600460205260ff6040600020541615611723576020817f56070b80bd617fcd2f7a284861edb488830a38f9dedcd77b2cb2f4eac17743e79260005260048252604060002060ff198154169055604051908152a1602060405160018152f35b6321ac7c5f60e01b60005260045260246000fd5b346101e75760203660031901126101e7577f104eb329a192aef26eddea07c2af5ad2587792e62b37ed4045b6ba59bc5540fc60206004356117766123d7565b8060005260088252611798816001600160a01b0360406000205416151561211e565b806000526008825260406000206001600160a01b03198154169055604051908152a1602060405160018152f35b346101e75760203660031901126101e757610e816117e4600435611fea565b604051918291602083526020830190611d3c565b346101e75760203660031901126101e757600435600052600560205260206040600020610e8181549160028101546005820154916006810154926007820154936118bf6001600160a01b0360088501541661185560098601611c50565b906001600160a01b03600a87015416976001600160a01b03600b8801541694600c8801549661188b600e600d8b01549a01611c50565b996040519e8f9e8f908152015260408d015260608c015260808b015260a08a015261018060c08a0152610180890190611d17565b9460e0880152610100870152610120860152610140850152838203610160850152611d17565b346101e75760603660031901126101e7576118fe611ba5565b602435906001600160a01b03821682036101e7577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460ff8160401c16159267ffffffffffffffff821680159081611b03575b6001149081611af9575b159081611af0575b50611adf5767ffffffffffffffff1982166001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00556119ce9184611aa0575b506119ac61241f565b6119b461241f565b6119bd336122a6565b6119c860443561223c565b5061234c565b506001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930054166001600160a01b03821603611a8e575b50611a1157005b68ff0000000000000000197ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b611a9a9061023d6123d7565b81611a0a565b68ffffffffffffffffff191668010000000000000001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055846119a3565b63f92ee8a960e01b60005260046000fd5b90501585611963565b303b15915061195b565b859150611951565b346101e75760203660031901126101e757600435600052600860205260206001600160a01b0360406000205416604051908152f35b346101e75760203660031901126101e757600435806000526005602052611b7a816001600160a01b03600860406000200154161515611f3f565b6000526006602052600260406000206001810154600052016020526020604060002054604051908152f35b600435906001600160a01b03821682036101e757565b90600182811c92168015611beb575b6020831014611bd557565b634e487b7160e01b600052602260045260246000fd5b91607f1691611bca565b6101c0810190811067ffffffffffffffff8211176113f557604052565b6040810190811067ffffffffffffffff8211176113f557604052565b90601f8019910116810190811067ffffffffffffffff8211176113f557604052565b9060405191826000825492611c6484611bbb565b8084529360018116908115611cd25750600114611c8b575b50611c8992500383611c2e565b565b90506000929192526020600020906000915b818310611cb6575050906020611c899282010138611c7c565b6020919350806001915483858901015201910190918492611c9d565b905060209250611c8994915060ff191682840152151560051b82010138611c7c565b60005b838110611d075750506000910152565b8181015183820152602001611cf7565b90602091611d3081518092818552858086019101611cf4565b601f01601f1916010190565b919091805183526020810151602084016000905b60028210611e415750505060408101516060840152606081015192608081016000905b60028210611e2b575050611e28929350608082015160c082015260a082015160e082015260c08201516101008201526001600160a01b0360e0830151166101208201526101a0611dd6610100840151610200610140850152610200840190611d17565b926001600160a01b03610120820151166101608401526001600160a01b0361014082015116610180840152610160810151828401526101808101516101c08401520151906101e0818403910152611d17565b90565b6020806001928851815201960191019094611d73565b60208060019263ffffffff865116815201930191019091611d50565b67ffffffffffffffff81116113f557601f01601f191660200190565b81601f820112156101e757803590611e9082611e5d565b92611e9e6040519485611c2e565b828452602083830101116101e757816000926020809301838601378301015290565b9060406003198301126101e757600435916024359067ffffffffffffffff82116101e757611e2891600401611e79565b60606003198201126101e7576004359160243567ffffffffffffffff81116101e75782611f1f91600401611e79565b916044359067ffffffffffffffff82116101e757611e2891600401611e79565b15611f475750565b63cd6f4a4f60e01b60005260045260246000fd5b60405190611f6882611bf5565b60606101a0836000815260408051611f808282611c2e565b813682376020830152600081830152805190611f9c8183611c2e565b3682378382015260006080820152600060a0820152600060c0820152600060e08201528261010082015260006101208201526000610140820152600061016082015260006101808201520152565b90611ff3611f5b565b5081600052600560205260406000209160405161200f81611bf5565b8354815260405163ffffffff6001860154818116835260201c166020820152612039604082611c2e565b6020820152600284015460408201526040518060038601906000905b6002821061210857505050611c8992918161207960406001600160a01b0394611c2e565b606082015260058601546080820152600686015460a0820152600786015460c08201526120f8600e836008890154169760e084019889526120bc60098201611c50565b61010085015284600a8201541661012085015284600b82015416610140850152600c810154610160850152600d81015461018085015201611c50565b6101a08201529451161515611f3f565b6001602081928554815201930191019091612055565b156121265750565b6381c4951960e01b60005260045260246000fd5b156121425750565b63166b4d0360e01b60005260045260246000fd5b908160209103126101e7575180151581036101e75790565b611e289392606092825260208201528160408201520190611d17565b156121925750565b604051632f9f8ab960e01b8152602060048201529081906121b7906024830190611d17565b0390fd5b8181106121c6575050565b600081556001016121bb565b60243563ffffffff811681036101e75790565b359063ffffffff821682036101e757565b6024906000905b6002821061220a57505050565b60208060019263ffffffff61221e876121e5565b168152019301910190916121fd565b60001981146104d25760010190565b60207fba0716ba1ee2ea8ecc4c64119b4537cdb42a99d82acf92af5b87607b8b523552916122686123d7565b80600155604051908152a1600190565b919060408301926000905b6002821061229057505050565b6020806001928551815201930191019091612283565b6001600160a01b03168015612336576001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930054826001600160a01b03198216177f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b631e4fbdf760e01b600052600060045260246000fd5b6001600160a01b039061235d6123d7565b16801515806123c2575b156123ae576020817f80052b810d39120cf6c976cca504a21703f585521dc7a41c6d241090e6c579b6926001600160a01b03196000541617600055604051908152a1600190565b6375ac4eb760e11b60005260045260246000fd5b506001600160a01b0360005416811415612367565b6001600160a01b037f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005416330361240a57565b63118cdaa760e01b6000523360045260246000fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c161561244e57565b631afcd79f60e31b60005260046000fdfea164736f6c634300081b000a",
  "libraries": {
    "PoseidonT3": "0x3333333C0A88F9BE4fd23ed0536F9B6c427e3B93"
  },
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "CiphernodeRegistrySet(address)": {
        "params": {
          "ciphernodeRegistry": "The address of the CiphernodeRegistry contract."
        }
      },
      "CiphertextOutputPublished(uint256,bytes)": {
        "params": {
          "ciphertextOutput": "ABI encoded ciphertext output.",
          "e3Id": "ID of the E3."
        }
      },
      "E3Activated(uint256,uint256,bytes)": {
        "params": {
          "committeePublicKey": "Public key of the committee.",
          "e3Id": "ID of the E3.",
          "expiration": "Timestamp when committee duties expire."
        }
      },
      "E3ProgramDisabled(address)": {
        "params": {
          "e3Program": "The address of the E3 Program."
        }
      },
      "E3ProgramEnabled(address)": {
        "params": {
          "e3Program": "The address of the E3 Program."
        }
      },
      "E3Requested(uint256,(uint256,uint32[2],uint256,uint256[2],uint256,uint256,bytes32,address,bytes,address,address,bytes32,bytes32,bytes),address,address)": {
        "params": {
          "e3": "Details of the E3.",
          "e3Id": "ID of the E3.",
          "e3Program": "Address of the Computation module selected.",
          "filter": "Address of the pool of nodes from which the Cipher Node committee was selected."
        }
      },
      "EncryptionSchemeDisabled(bytes32)": {
        "params": {
          "encryptionSchemeId": "The ID of the encryption scheme that was disabled."
        }
      },
      "EncryptionSchemeEnabled(bytes32)": {
        "params": {
          "encryptionSchemeId": "The ID of the encryption scheme that was enabled."
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "InputPublished(uint256,bytes,uint256,uint256)": {
        "params": {
          "data": "ABI encoded input data.",
          "e3Id": "ID of the E3."
        }
      },
      "MaxDurationSet(uint256)": {
        "params": {
          "maxDuration": "The maximum duration of a computation in seconds."
        }
      },
      "PlaintextOutputPublished(uint256,bytes)": {
        "params": {
          "e3Id": "ID of the E3.",
          "plaintextOutput": "ABI encoded plaintext output."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "activate(uint256,bytes)": {
        "details": "This function MUST emit the E3Activated event.This function MUST revert if the given E3 has not yet been requested.This function MUST revert if the selected node committee has not yet published a public key.",
        "params": {
          "e3Id": "ID of the E3.",
          "publicKey": "Public key of the committee."
        },
        "returns": {
          "success": "True if the E3 was successfully activated."
        }
      },
      "constructor": {
        "params": {
          "_maxDuration": "The maximum duration of a computation in seconds",
          "_owner": "The owner of this contract"
        }
      },
      "getE3(uint256)": {
        "details": "This function MUST revert if the E3 does not exist.",
        "params": {
          "e3Id": "ID of the E3."
        },
        "returns": {
          "e3": "The struct representing the requested E3."
        }
      },
      "getInputRoot(uint256)": {
        "details": "This function MUST revert if the E3 does not exist.",
        "params": {
          "e3Id": "ID of the E3."
        },
        "returns": {
          "_0": "The root of the input merkle tree."
        }
      },
      "initialize(address,address,uint256)": {
        "params": {
          "_maxDuration": "The maximum duration of a computation in seconds",
          "_owner": "The owner of this contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "publishCiphertextOutput(uint256,bytes,bytes)": {
        "details": "This function MUST emit the CiphertextOutputPublished event.",
        "params": {
          "ciphertextOutput": "ABI encoded output data to verify.",
          "e3Id": "ID of the E3.",
          "proof": "ABI encoded data to verify the ciphertextOutput."
        },
        "returns": {
          "success": "True if the output was successfully published."
        }
      },
      "publishInput(uint256,bytes)": {
        "details": "This function MUST revert if the E3 is not yet activated.This function MUST emit the InputPublished event.",
        "params": {
          "data": "ABI encoded input data to publish.",
          "e3Id": "ID of the E3."
        },
        "returns": {
          "success": "True if the input was successfully published."
        }
      },
      "publishPlaintextOutput(uint256,bytes,bytes)": {
        "details": "This function MUST revert if the output has not been published.This function MUST emit the PlaintextOutputPublished event.",
        "params": {
          "e3Id": "ID of the E3.",
          "plaintextOutput": "ABI encoded plaintext output.",
          "proof": "ABI encoded data to verify the plaintextOutput."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "request(address,uint32[2],uint256[2],uint256,address,bytes,bytes)": {
        "details": "This function MUST emit the E3Requested event.",
        "params": {
          "computeProviderParams": "ABI encoded compute provider parameters.",
          "duration": "The duration of the computation in seconds.",
          "e3Program": "Address of the E3 Program.",
          "e3ProgramParams": "ABI encoded computation parameters.",
          "filter": "IDs of the pool of nodes from which to select the committee.",
          "threshold": "The M/N threshold for the committee."
        },
        "returns": {
          "e3": "The E3 struct.",
          "e3Id": "ID of the E3."
        }
      },
      "setMaxDuration(uint256)": {
        "params": {
          "_maxDuration": "The maximum duration of a computation in seconds."
        },
        "returns": {
          "success": "True if the max duration was successfully set."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CiphernodeRegistrySet(address)": {
        "notice": "This event MUST be emitted any time the CiphernodeRegistry is set."
      },
      "CiphertextOutputPublished(uint256,bytes)": {
        "notice": "This event MUST be emitted when the ciphertext output of an Encrypted Execution Environment (E3) is successfully published."
      },
      "E3Activated(uint256,uint256,bytes)": {
        "notice": "This event MUST be emitted when an Encrypted Execution Environment (E3) is successfully activated."
      },
      "E3ProgramDisabled(address)": {
        "notice": "This event MUST be emitted any time a E3 Program is disabled."
      },
      "E3ProgramEnabled(address)": {
        "notice": "This event MUST be emitted any time a E3 Program is enabled."
      },
      "E3Requested(uint256,(uint256,uint32[2],uint256,uint256[2],uint256,uint256,bytes32,address,bytes,address,address,bytes32,bytes32,bytes),address,address)": {
        "notice": "This event MUST be emitted when an Encrypted Execution Environment (E3) is successfully requested."
      },
      "EncryptionSchemeDisabled(bytes32)": {
        "notice": "This event MUST be emitted any time an encryption scheme is disabled."
      },
      "EncryptionSchemeEnabled(bytes32)": {
        "notice": "The event MUST be emitted any time an encryption scheme is enabled."
      },
      "InputPublished(uint256,bytes,uint256,uint256)": {
        "notice": "This event MUST be emitted when an input to an Encrypted Execution Environment (E3) is successfully published."
      },
      "MaxDurationSet(uint256)": {
        "notice": "This event MUST be emitted any time the `maxDuration` is set."
      },
      "PlaintextOutputPublished(uint256,bytes)": {
        "notice": "This event MUST be emitted when the plaintext output of an Encrypted Execution Environment (E3) is successfully published."
      }
    },
    "kind": "user",
    "methods": {
      "activate(uint256,bytes)": {
        "notice": "This function should be called to activate an Encrypted Execution Environment (E3) once it has been initialized and is ready for input."
      },
      "getE3(uint256)": {
        "notice": "This function should be called to retrieve the details of an Encrypted Execution Environment (E3)."
      },
      "getInputRoot(uint256)": {
        "notice": "This function returns root of the input merkle tree for a given E3."
      },
      "publishCiphertextOutput(uint256,bytes,bytes)": {
        "notice": "This function should be called to publish output data for an Encrypted Execution Environment (E3)."
      },
      "publishInput(uint256,bytes)": {
        "notice": "This function should be called to publish input data for Encrypted Execution Environment (E3)."
      },
      "publishPlaintextOutput(uint256,bytes,bytes)": {
        "notice": "This function publishes the plaintext output of an Encrypted Execution Environment (E3)."
      },
      "request(address,uint32[2],uint256[2],uint256,address,bytes,bytes)": {
        "notice": "This function should be called to request a computation within an Encrypted Execution Environment (E3)."
      },
      "setMaxDuration(uint256)": {
        "notice": "This function should be called to set the maximum duration of requested computations."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1382,
        "contract": "contracts/Enclave.sol:Enclave",
        "label": "ciphernodeRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ICiphernodeRegistry)2534"
      },
      {
        "astId": 1384,
        "contract": "contracts/Enclave.sol:Enclave",
        "label": "maxDuration",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1386,
        "contract": "contracts/Enclave.sol:Enclave",
        "label": "nexte3Id",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1388,
        "contract": "contracts/Enclave.sol:Enclave",
        "label": "requests",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1393,
        "contract": "contracts/Enclave.sol:Enclave",
        "label": "e3Programs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IE3Program)2628,t_bool)"
      },
      {
        "astId": 1398,
        "contract": "contracts/Enclave.sol:Enclave",
        "label": "e3s",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(E3)2594_storage)"
      },
      {
        "astId": 1403,
        "contract": "contracts/Enclave.sol:Enclave",
        "label": "inputs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(LeanIMTData)518_storage)"
      },
      {
        "astId": 1407,
        "contract": "contracts/Enclave.sol:Enclave",
        "label": "inputCounts",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1412,
        "contract": "contracts/Enclave.sol:Enclave",
        "label": "decryptionVerifiers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_contract(IDecryptionVerifier)2549)"
      }
    ],
    "types": {
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint32)2_storage": {
        "base": "t_uint32",
        "encoding": "inplace",
        "label": "uint32[2]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICiphernodeRegistry)2534": {
        "encoding": "inplace",
        "label": "contract ICiphernodeRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IDecryptionVerifier)2549": {
        "encoding": "inplace",
        "label": "contract IDecryptionVerifier",
        "numberOfBytes": "20"
      },
      "t_contract(IE3Program)2628": {
        "encoding": "inplace",
        "label": "contract IE3Program",
        "numberOfBytes": "20"
      },
      "t_contract(IInputValidator)2823": {
        "encoding": "inplace",
        "label": "contract IInputValidator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_contract(IDecryptionVerifier)2549)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract IDecryptionVerifier)",
        "numberOfBytes": "32",
        "value": "t_contract(IDecryptionVerifier)2549"
      },
      "t_mapping(t_contract(IE3Program)2628,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IE3Program)2628",
        "label": "mapping(contract IE3Program => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(E3)2594_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct E3)",
        "numberOfBytes": "32",
        "value": "t_struct(E3)2594_storage"
      },
      "t_mapping(t_uint256,t_struct(LeanIMTData)518_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LeanIMTData)",
        "numberOfBytes": "32",
        "value": "t_struct(LeanIMTData)518_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(E3)2594_storage": {
        "encoding": "inplace",
        "label": "struct E3",
        "members": [
          {
            "astId": 2560,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "seed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2564,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "threshold",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)2_storage"
          },
          {
            "astId": 2566,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "requestBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2570,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "startWindow",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 2572,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "duration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2574,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "expiration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2576,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "encryptionSchemeId",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 2579,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "e3Program",
            "offset": 0,
            "slot": "8",
            "type": "t_contract(IE3Program)2628"
          },
          {
            "astId": 2581,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "e3ProgramParams",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes_storage"
          },
          {
            "astId": 2584,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "inputValidator",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IInputValidator)2823"
          },
          {
            "astId": 2587,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "decryptionVerifier",
            "offset": 0,
            "slot": "11",
            "type": "t_contract(IDecryptionVerifier)2549"
          },
          {
            "astId": 2589,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "committeePublicKey",
            "offset": 0,
            "slot": "12",
            "type": "t_bytes32"
          },
          {
            "astId": 2591,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "ciphertextOutput",
            "offset": 0,
            "slot": "13",
            "type": "t_bytes32"
          },
          {
            "astId": 2593,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "plaintextOutput",
            "offset": 0,
            "slot": "14",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(LeanIMTData)518_storage": {
        "encoding": "inplace",
        "label": "struct LeanIMTData",
        "members": [
          {
            "astId": 507,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 509,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "depth",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 513,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "sideNodes",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 517,
            "contract": "contracts/Enclave.sol:Enclave",
            "label": "leaves",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}